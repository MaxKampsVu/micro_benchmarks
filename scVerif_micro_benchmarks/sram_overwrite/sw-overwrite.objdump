// Overwrite share of x1 with share of x0 
// Avoid remnant effect by loading and storing intermediate value 
00000000 <micro_benchmark>:
    0: b5f0b5f0   is
    4: b5f0b5f0   lw  t1, a0, #0   // load x0
    8: b5f0b5f0   lw  t2, a2, #0   // load z0 -> avoid remnant leak
    12: b5f0b5f0  sw  t2, a2, #0   // store z0 -> avoid remnant leak
    16: b5f0b5f0  sw  t1, a0, #4   // store x0 in memory at share x1 -> overwrite leak 
    20: b5f0b5f0  lw  zero, a2, #0 
    24: b5f0b5f0  lw  zero, a2, #4 
