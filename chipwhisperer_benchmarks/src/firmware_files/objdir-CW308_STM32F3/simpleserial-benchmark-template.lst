   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial-benchmark-template.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.get_pt,"ax",%progbits
  16              		.align	1
  17              		.global	get_pt
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	get_pt:
  25              	.LVL0:
  26              	.LFB4:
  27              		.file 1 "simpleserial-benchmark-template.c"
   1:simpleserial-benchmark-template.c **** 
   2:simpleserial-benchmark-template.c **** #include <stdint.h>
   3:simpleserial-benchmark-template.c **** #include <stdlib.h> // Required for malloc/free if used, but we'll use stack buffers
   4:simpleserial-benchmark-template.c **** 
   5:simpleserial-benchmark-template.c **** // Include HAL and SimpleSerial headers
   6:simpleserial-benchmark-template.c **** #include "hal.h"
   7:simpleserial-benchmark-template.c **** #include "simpleserial.h"
   8:simpleserial-benchmark-template.c **** 
   9:simpleserial-benchmark-template.c **** uint32_t rand_uint32() {
  10:simpleserial-benchmark-template.c ****     return ((uint32_t)rand() << 16) | ((uint32_t)rand() & 0xFFFF);
  11:simpleserial-benchmark-template.c **** }
  12:simpleserial-benchmark-template.c **** 
  13:simpleserial-benchmark-template.c **** // Helper function to convert a single hex character to its integer value
  14:simpleserial-benchmark-template.c **** static uint8_t hex_to_int(char c) {
  15:simpleserial-benchmark-template.c ****     if (c >= '0' && c <= '9') {
  16:simpleserial-benchmark-template.c ****         return c - '0';
  17:simpleserial-benchmark-template.c ****     } else if (c >= 'a' && c <= 'f') {
  18:simpleserial-benchmark-template.c ****         return c - 'a' + 10;
  19:simpleserial-benchmark-template.c ****     } else if (c >= 'A' && c <= 'F') {
  20:simpleserial-benchmark-template.c ****         return c - 'A' + 10;
  21:simpleserial-benchmark-template.c ****     }
  22:simpleserial-benchmark-template.c ****     return 0; // Should not happen with valid input
  23:simpleserial-benchmark-template.c **** }
  24:simpleserial-benchmark-template.c **** 
  25:simpleserial-benchmark-template.c **** // Helper function to convert 8 (big-endian) hex characters (representing 4 bytes) to a uint32_t
  26:simpleserial-benchmark-template.c **** static uint32_t hex_to_uint32(const uint8_t* hex_chars) {
  27:simpleserial-benchmark-template.c ****     uint32_t val = 0;
  28:simpleserial-benchmark-template.c ****     for (int i = 0; i < 8; ++i) {
  29:simpleserial-benchmark-template.c ****         val = (val << 4) | hex_to_int((char)hex_chars[i]);
  30:simpleserial-benchmark-template.c ****     }
  31:simpleserial-benchmark-template.c ****     return val;
  32:simpleserial-benchmark-template.c **** }
  33:simpleserial-benchmark-template.c **** 
  34:simpleserial-benchmark-template.c **** // Helper function to convert a uint32_t to 8 (big-endian) hex characters 
  35:simpleserial-benchmark-template.c **** static void uint32_to_hex(uint32_t val, uint8_t* hex_buf) {
  36:simpleserial-benchmark-template.c ****     for (int i = 7; i >= 0; --i) {
  37:simpleserial-benchmark-template.c ****         uint8_t nibble = (val >> (i * 4)) & 0x0F;
  38:simpleserial-benchmark-template.c ****         if (nibble < 10) {
  39:simpleserial-benchmark-template.c ****             hex_buf[7 - i] = '0' + nibble;
  40:simpleserial-benchmark-template.c ****         } else {
  41:simpleserial-benchmark-template.c ****             hex_buf[7 - i] = 'A' + (nibble - 10);
  42:simpleserial-benchmark-template.c ****         }
  43:simpleserial-benchmark-template.c ****     }
  44:simpleserial-benchmark-template.c **** }
  45:simpleserial-benchmark-template.c **** 
  46:simpleserial-benchmark-template.c **** 
  47:simpleserial-benchmark-template.c **** 
  48:simpleserial-benchmark-template.c **** // SimpleSerial command handler for 'p' (process/plain) command
  49:simpleserial-benchmark-template.c **** // Input 'data' contains 16 hex characters (8 bytes total)
  50:simpleserial-benchmark-template.c **** // representing r0 (first 8 chars) and share0 (next 8 chars).
  51:simpleserial-benchmark-template.c **** // Returns 0 on success.
  52:simpleserial-benchmark-template.c **** uint8_t get_pt(uint8_t* data, uint8_t len) {
  28              		.loc 1 52 44 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  53:simpleserial-benchmark-template.c ****     if (len != 8) { // We expect 8 bytes (16 hex chars) converted by simpleserial
  32              		.loc 1 53 5 view .LVU1
  52:simpleserial-benchmark-template.c ****     if (len != 8) { // We expect 8 bytes (16 hex chars) converted by simpleserial
  33              		.loc 1 52 44 is_stmt 0 view .LVU2
  34 0000 30B5     		push	{r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 53 8 view .LVU3
  41 0002 0829     		cmp	r1, #8
  52:simpleserial-benchmark-template.c ****     if (len != 8) { // We expect 8 bytes (16 hex chars) converted by simpleserial
  42              		.loc 1 52 44 view .LVU4
  43 0004 0346     		mov	r3, r0
  44 0006 8BB0     		sub	sp, sp, #44
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 56
  47 0008 4FF00100 		mov	r0, #1
  48              	.LVL1:
  49              		.loc 1 53 8 view .LVU5
  50 000c 24D1     		bne	.L2
  51              	.LVL2:
  52              	.LBB4:
  53              	.LBI4:
  52:simpleserial-benchmark-template.c ****     if (len != 8) { // We expect 8 bytes (16 hex chars) converted by simpleserial
  54              		.loc 1 52 9 is_stmt 1 view .LVU6
  55              	.LBB5:
  54:simpleserial-benchmark-template.c ****         return 1; 
  55:simpleserial-benchmark-template.c ****     }
  56:simpleserial-benchmark-template.c **** 
  57:simpleserial-benchmark-template.c ****     volatile uint32_t random = 0;
  56              		.loc 1 57 5 view .LVU7
  57 000e 1A68     		ldr	r2, [r3]	@ unaligned
  58 0010 5B68     		ldr	r3, [r3, #4]	@ unaligned
  59              	.LVL3:
  60              		.loc 1 57 23 is_stmt 0 view .LVU8
  61 0012 0025     		movs	r5, #0
  62 0014 12BA     		rev	r2, r2
  63 0016 1BBA     		rev	r3, r3
  64 0018 0095     		str	r5, [sp]
  58:simpleserial-benchmark-template.c ****     volatile uint32_t target0, target1, target2, target3;
  65              		.loc 1 58 5 is_stmt 1 view .LVU9
  59:simpleserial-benchmark-template.c ****     volatile uint32_t zero = (uint32_t) 0;
  66              		.loc 1 59 5 view .LVU10
  60:simpleserial-benchmark-template.c ****     volatile uint32_t one = (uint32_t) 1;
  61:simpleserial-benchmark-template.c ****     volatile uint32_t share0 = (uint32_t)data[0] << 24 | (uint32_t)data[1] << 16 | (uint32_t)data[2
  62:simpleserial-benchmark-template.c ****     volatile uint32_t share1 = (uint32_t)data[4] << 24 | (uint32_t)data[5] << 16 | (uint32_t)data[6
  63:simpleserial-benchmark-template.c **** 
  64:simpleserial-benchmark-template.c ****     // --- Start of power trace capture ---
  65:simpleserial-benchmark-template.c ****     trigger_high();
  66:simpleserial-benchmark-template.c ****     
  67:simpleserial-benchmark-template.c ****     // Microbenchmark
  68:simpleserial-benchmark-template.c ****     asm volatile (
  67              		.loc 1 68 5 is_stmt 0 view .LVU11
  68 001a 07AC     		add	r4, sp, #28
  59:simpleserial-benchmark-template.c ****     volatile uint32_t zero = (uint32_t) 0;
  69              		.loc 1 59 23 view .LVU12
  70 001c 0595     		str	r5, [sp, #20]
  60:simpleserial-benchmark-template.c ****     volatile uint32_t one = (uint32_t) 1;
  71              		.loc 1 60 5 is_stmt 1 view .LVU13
  60:simpleserial-benchmark-template.c ****     volatile uint32_t one = (uint32_t) 1;
  72              		.loc 1 60 23 is_stmt 0 view .LVU14
  73 001e 0690     		str	r0, [sp, #24]
  61:simpleserial-benchmark-template.c ****     volatile uint32_t share1 = (uint32_t)data[4] << 24 | (uint32_t)data[5] << 16 | (uint32_t)data[6
  74              		.loc 1 61 5 is_stmt 1 view .LVU15
  61:simpleserial-benchmark-template.c ****     volatile uint32_t share1 = (uint32_t)data[4] << 24 | (uint32_t)data[5] << 16 | (uint32_t)data[6
  75              		.loc 1 61 23 is_stmt 0 view .LVU16
  76 0020 0792     		str	r2, [sp, #28]
  62:simpleserial-benchmark-template.c **** 
  77              		.loc 1 62 5 is_stmt 1 view .LVU17
  62:simpleserial-benchmark-template.c **** 
  78              		.loc 1 62 23 is_stmt 0 view .LVU18
  79 0022 0893     		str	r3, [sp, #32]
  65:simpleserial-benchmark-template.c ****     
  80              		.loc 1 65 5 is_stmt 1 view .LVU19
  81 0024 FFF7FEFF 		bl	trigger_high
  82              	.LVL4:
  83              		.loc 1 68 5 view .LVU20
  84 0028 059A     		ldr	r2, [sp, #20]
  85 002a 08A9     		add	r1, sp, #32
  86 002c 05AB     		add	r3, sp, #20
  87 002e 6846     		mov	r0, sp
  88              		.syntax unified
  89              	@ 68 "simpleserial-benchmark-template.c" 1
  90 0030 00BF     		nop
  91 0032 00BF     	nop
  92 0034 2468     	ldr r4, [r4]
  93 0036 00BF     	nop
  94 0038 1968     	ldr r1, [r3]
  95 003a 00BF     	nop
  96 003c 0A68     	ldr r2, [r1]
  97 003e 00BF     	nop
  98              	
  99              	@ 0 "" 2
 100              		.thumb
 101              		.syntax unified
 102 0040 0194     		str	r4, [sp, #4]
 103 0042 0291     		str	r1, [sp, #8]
 104 0044 0392     		str	r2, [sp, #12]
 105 0046 0493     		str	r3, [sp, #16]
  69:simpleserial-benchmark-template.c **** 		
  70:simpleserial-benchmark-template.c **** 		"nop\n"
  71:simpleserial-benchmark-template.c **** 		"nop\n"
  72:simpleserial-benchmark-template.c **** 		"ldr %0, [%4]\n"
  73:simpleserial-benchmark-template.c **** 		"nop\n"
  74:simpleserial-benchmark-template.c **** 		"ldr %1, [%7]\n"
  75:simpleserial-benchmark-template.c **** 		"nop\n"
  76:simpleserial-benchmark-template.c **** 		"ldr %2, [%5]\n"
  77:simpleserial-benchmark-template.c **** 		"nop\n"
  78:simpleserial-benchmark-template.c **** 		: "r=" (target0), "r=" (target1), "r=" (target2), "r=" (target3)
  79:simpleserial-benchmark-template.c **** 		: "r" (&share0), "r" (&share1), "r" (zero), "r" (&zero), "r" (&random)
  80:simpleserial-benchmark-template.c **** 		:
  81:simpleserial-benchmark-template.c ****     );
  82:simpleserial-benchmark-template.c ****     
  83:simpleserial-benchmark-template.c ****     // --- End of power trace capture ---
  84:simpleserial-benchmark-template.c ****     trigger_low();
 106              		.loc 1 84 5 view .LVU21
 107 0048 FFF7FEFF 		bl	trigger_low
 108              	.LVL5:
  85:simpleserial-benchmark-template.c **** 
  86:simpleserial-benchmark-template.c ****     uint8_t result_buf[4];
 109              		.loc 1 86 5 view .LVU22
  87:simpleserial-benchmark-template.c **** 
  88:simpleserial-benchmark-template.c ****     // 'r' command, 4 bytes of data
  89:simpleserial-benchmark-template.c ****     simpleserial_put('r', 4, result_buf);
 110              		.loc 1 89 5 view .LVU23
 111 004c 7220     		movs	r0, #114
 112 004e 09AA     		add	r2, sp, #36
 113 0050 0421     		movs	r1, #4
 114 0052 FFF7FEFF 		bl	simpleserial_put
 115              	.LVL6:
  90:simpleserial-benchmark-template.c **** 
  91:simpleserial-benchmark-template.c ****     return 0; // Indicate success
 116              		.loc 1 91 5 view .LVU24
 117              		.loc 1 91 5 is_stmt 0 view .LVU25
 118 0056 2846     		mov	r0, r5
 119              	.L2:
 120              	.LBE5:
 121              	.LBE4:
  92:simpleserial-benchmark-template.c **** }
 122              		.loc 1 92 1 view .LVU26
 123 0058 0BB0     		add	sp, sp, #44
 124              	.LCFI2:
 125              		.cfi_def_cfa_offset 12
 126              		@ sp needed
 127 005a 30BD     		pop	{r4, r5, pc}
 128              		.cfi_endproc
 129              	.LFE4:
 131              		.section	.text.rand_uint32,"ax",%progbits
 132              		.align	1
 133              		.global	rand_uint32
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	rand_uint32:
 140              	.LFB0:
   9:simpleserial-benchmark-template.c ****     return ((uint32_t)rand() << 16) | ((uint32_t)rand() & 0xFFFF);
 141              		.loc 1 9 24 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
  10:simpleserial-benchmark-template.c **** }
 145              		.loc 1 10 5 view .LVU28
   9:simpleserial-benchmark-template.c ****     return ((uint32_t)rand() << 16) | ((uint32_t)rand() & 0xFFFF);
 146              		.loc 1 9 24 is_stmt 0 view .LVU29
 147 0000 10B5     		push	{r4, lr}
 148              	.LCFI3:
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 4, -8
 151              		.cfi_offset 14, -4
  10:simpleserial-benchmark-template.c **** }
 152              		.loc 1 10 23 view .LVU30
 153 0002 FFF7FEFF 		bl	rand
 154              	.LVL7:
 155 0006 0446     		mov	r4, r0
  10:simpleserial-benchmark-template.c **** }
 156              		.loc 1 10 50 view .LVU31
 157 0008 FFF7FEFF 		bl	rand
 158              	.LVL8:
  10:simpleserial-benchmark-template.c **** }
 159              		.loc 1 10 57 view .LVU32
 160 000c 80B2     		uxth	r0, r0
  11:simpleserial-benchmark-template.c **** 
 161              		.loc 1 11 1 view .LVU33
 162 000e 40EA0440 		orr	r0, r0, r4, lsl #16
 163 0012 10BD     		pop	{r4, pc}
 164              		.cfi_endproc
 165              	.LFE0:
 167              		.section	.text.startup.main,"ax",%progbits
 168              		.align	1
 169              		.global	main
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu softvfp
 175              	main:
 176              	.LFB5:
  93:simpleserial-benchmark-template.c **** 
  94:simpleserial-benchmark-template.c **** 
  95:simpleserial-benchmark-template.c **** int main(void) {
 177              		.loc 1 95 16 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
  96:simpleserial-benchmark-template.c ****     platform_init();
 182              		.loc 1 96 5 view .LVU35
  95:simpleserial-benchmark-template.c ****     platform_init();
 183              		.loc 1 95 16 is_stmt 0 view .LVU36
 184 0000 08B5     		push	{r3, lr}
 185              	.LCFI4:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 3, -8
 188              		.cfi_offset 14, -4
 189              		.loc 1 96 5 view .LVU37
 190 0002 FFF7FEFF 		bl	platform_init
 191              	.LVL9:
  97:simpleserial-benchmark-template.c **** 
  98:simpleserial-benchmark-template.c ****     init_uart();
 192              		.loc 1 98 5 is_stmt 1 view .LVU38
 193 0006 FFF7FEFF 		bl	init_uart
 194              	.LVL10:
  99:simpleserial-benchmark-template.c **** 
 100:simpleserial-benchmark-template.c ****     trigger_setup();
 195              		.loc 1 100 5 view .LVU39
 196 000a FFF7FEFF 		bl	trigger_setup
 197              	.LVL11:
 101:simpleserial-benchmark-template.c ****     simpleserial_init();
 198              		.loc 1 101 5 view .LVU40
 199 000e FFF7FEFF 		bl	simpleserial_init
 200              	.LVL12:
 102:simpleserial-benchmark-template.c **** 
 103:simpleserial-benchmark-template.c ****     // Register the SimpleSerial command 'p'
 104:simpleserial-benchmark-template.c ****     // 'p': command character
 105:simpleserial-benchmark-template.c ****     // 8: expected number of data bytes (16 hex characters input)
 106:simpleserial-benchmark-template.c ****     // get_pt: callback function pointer
 107:simpleserial-benchmark-template.c ****     simpleserial_addcmd('p', 8, get_pt);
 201              		.loc 1 107 5 view .LVU41
 202 0012 044A     		ldr	r2, .L7
 203 0014 0821     		movs	r1, #8
 204 0016 7020     		movs	r0, #112
 205 0018 FFF7FEFF 		bl	simpleserial_addcmd
 206              	.LVL13:
 207              	.L6:
 108:simpleserial-benchmark-template.c **** 
 109:simpleserial-benchmark-template.c ****     // Main loop: continuously check for and process incoming SimpleSerial data
 110:simpleserial-benchmark-template.c ****     while (1) {
 208              		.loc 1 110 5 discriminator 1 view .LVU42
 111:simpleserial-benchmark-template.c ****         simpleserial_get();
 209              		.loc 1 111 9 discriminator 1 view .LVU43
 210 001c FFF7FEFF 		bl	simpleserial_get
 211              	.LVL14:
 110:simpleserial-benchmark-template.c ****         simpleserial_get();
 212              		.loc 1 110 11 discriminator 1 view .LVU44
 213 0020 FCE7     		b	.L6
 214              	.L8:
 215 0022 00BF     		.align	2
 216              	.L7:
 217 0024 00000000 		.word	get_pt
 218              		.cfi_endproc
 219              	.LFE5:
 221              		.text
 222              	.Letext0:
 223              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 224              		.file 3 "/home/max/chipwhisperer/firmware/mcu/hal/hal.h"
 225              		.file 4 "/home/max/chipwhisperer/firmware/mcu/hal/stm32f3/stm32f3_hal.h"
 226              		.file 5 "/home/max/chipwhisperer/firmware/mcu/simpleserial/simpleserial.h"
 227              		.file 6 "/usr/include/newlib/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial-benchmark-template.c
     /tmp/cckvyjUV.s:16     .text.get_pt:0000000000000000 $t
     /tmp/cckvyjUV.s:24     .text.get_pt:0000000000000000 get_pt
     /tmp/cckvyjUV.s:132    .text.rand_uint32:0000000000000000 $t
     /tmp/cckvyjUV.s:139    .text.rand_uint32:0000000000000000 rand_uint32
     /tmp/cckvyjUV.s:168    .text.startup.main:0000000000000000 $t
     /tmp/cckvyjUV.s:175    .text.startup.main:0000000000000000 main
     /tmp/cckvyjUV.s:217    .text.startup.main:0000000000000024 $d

UNDEFINED SYMBOLS
trigger_high
trigger_low
simpleserial_put
rand
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get
