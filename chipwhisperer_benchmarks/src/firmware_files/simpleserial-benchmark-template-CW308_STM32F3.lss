
simpleserial-benchmark-template-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003234  08003234  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003234  08003234  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800323c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000064  080032a0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000030c  080032a0  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182fe  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000531c  00000000  00000000  000383bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00006e39  00000000  00000000  0003d6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000768  00000000  00000000  00044518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008f0  00000000  00000000  00044c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000843d  00000000  00000000  00045570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002d91  00000000  00000000  0004d9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001094  00000000  00000000  00050740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  000517d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000205  00000000  00000000  000519d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000064 	.word	0x20000064
 80001a4:	20000064 	.word	0x20000064
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000064 	.word	0x20000064
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000064 	.word	0x20000064
 80001f0:	00000000 	.word	0x00000000
 80001f4:	080030dc 	.word	0x080030dc

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	080030dc 	.word	0x080030dc

08000218 <__errno>:
 8000218:	4b01      	ldr	r3, [pc, #4]	; (8000220 <__errno+0x8>)
 800021a:	6818      	ldr	r0, [r3, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000000 	.word	0x20000000

08000224 <__libc_init_array>:
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	4e0d      	ldr	r6, [pc, #52]	; (800025c <__libc_init_array+0x38>)
 8000228:	4d0d      	ldr	r5, [pc, #52]	; (8000260 <__libc_init_array+0x3c>)
 800022a:	1b76      	subs	r6, r6, r5
 800022c:	10b6      	asrs	r6, r6, #2
 800022e:	d006      	beq.n	800023e <__libc_init_array+0x1a>
 8000230:	2400      	movs	r4, #0
 8000232:	f855 3b04 	ldr.w	r3, [r5], #4
 8000236:	3401      	adds	r4, #1
 8000238:	4798      	blx	r3
 800023a:	42a6      	cmp	r6, r4
 800023c:	d1f9      	bne.n	8000232 <__libc_init_array+0xe>
 800023e:	4e09      	ldr	r6, [pc, #36]	; (8000264 <__libc_init_array+0x40>)
 8000240:	4d09      	ldr	r5, [pc, #36]	; (8000268 <__libc_init_array+0x44>)
 8000242:	1b76      	subs	r6, r6, r5
 8000244:	f002 ff4a 	bl	80030dc <_init>
 8000248:	10b6      	asrs	r6, r6, #2
 800024a:	d006      	beq.n	800025a <__libc_init_array+0x36>
 800024c:	2400      	movs	r4, #0
 800024e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000252:	3401      	adds	r4, #1
 8000254:	4798      	blx	r3
 8000256:	42a6      	cmp	r6, r4
 8000258:	d1f9      	bne.n	800024e <__libc_init_array+0x2a>
 800025a:	bd70      	pop	{r4, r5, r6, pc}
 800025c:	08003234 	.word	0x08003234
 8000260:	08003234 	.word	0x08003234
 8000264:	08003238 	.word	0x08003238
 8000268:	08003234 	.word	0x08003234

0800026c <memset>:
 800026c:	0783      	lsls	r3, r0, #30
 800026e:	b530      	push	{r4, r5, lr}
 8000270:	d048      	beq.n	8000304 <memset+0x98>
 8000272:	1e54      	subs	r4, r2, #1
 8000274:	2a00      	cmp	r2, #0
 8000276:	d03f      	beq.n	80002f8 <memset+0x8c>
 8000278:	b2ca      	uxtb	r2, r1
 800027a:	4603      	mov	r3, r0
 800027c:	e001      	b.n	8000282 <memset+0x16>
 800027e:	3c01      	subs	r4, #1
 8000280:	d33a      	bcc.n	80002f8 <memset+0x8c>
 8000282:	f803 2b01 	strb.w	r2, [r3], #1
 8000286:	079d      	lsls	r5, r3, #30
 8000288:	d1f9      	bne.n	800027e <memset+0x12>
 800028a:	2c03      	cmp	r4, #3
 800028c:	d92d      	bls.n	80002ea <memset+0x7e>
 800028e:	b2cd      	uxtb	r5, r1
 8000290:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000294:	2c0f      	cmp	r4, #15
 8000296:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800029a:	d936      	bls.n	800030a <memset+0x9e>
 800029c:	f1a4 0210 	sub.w	r2, r4, #16
 80002a0:	f022 0c0f 	bic.w	ip, r2, #15
 80002a4:	f103 0e20 	add.w	lr, r3, #32
 80002a8:	44e6      	add	lr, ip
 80002aa:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80002ae:	f103 0210 	add.w	r2, r3, #16
 80002b2:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002b6:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002ba:	3210      	adds	r2, #16
 80002bc:	4572      	cmp	r2, lr
 80002be:	d1f8      	bne.n	80002b2 <memset+0x46>
 80002c0:	f10c 0201 	add.w	r2, ip, #1
 80002c4:	f014 0f0c 	tst.w	r4, #12
 80002c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002cc:	f004 0c0f 	and.w	ip, r4, #15
 80002d0:	d013      	beq.n	80002fa <memset+0x8e>
 80002d2:	f1ac 0304 	sub.w	r3, ip, #4
 80002d6:	f023 0303 	bic.w	r3, r3, #3
 80002da:	3304      	adds	r3, #4
 80002dc:	4413      	add	r3, r2
 80002de:	f842 5b04 	str.w	r5, [r2], #4
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d1fb      	bne.n	80002de <memset+0x72>
 80002e6:	f00c 0403 	and.w	r4, ip, #3
 80002ea:	b12c      	cbz	r4, 80002f8 <memset+0x8c>
 80002ec:	b2ca      	uxtb	r2, r1
 80002ee:	441c      	add	r4, r3
 80002f0:	f803 2b01 	strb.w	r2, [r3], #1
 80002f4:	429c      	cmp	r4, r3
 80002f6:	d1fb      	bne.n	80002f0 <memset+0x84>
 80002f8:	bd30      	pop	{r4, r5, pc}
 80002fa:	4664      	mov	r4, ip
 80002fc:	4613      	mov	r3, r2
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d1f4      	bne.n	80002ec <memset+0x80>
 8000302:	e7f9      	b.n	80002f8 <memset+0x8c>
 8000304:	4603      	mov	r3, r0
 8000306:	4614      	mov	r4, r2
 8000308:	e7bf      	b.n	800028a <memset+0x1e>
 800030a:	461a      	mov	r2, r3
 800030c:	46a4      	mov	ip, r4
 800030e:	e7e0      	b.n	80002d2 <memset+0x66>

08000310 <srand>:
 8000310:	b538      	push	{r3, r4, r5, lr}
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <srand+0x4c>)
 8000314:	681d      	ldr	r5, [r3, #0]
 8000316:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000318:	4604      	mov	r4, r0
 800031a:	b11a      	cbz	r2, 8000324 <srand+0x14>
 800031c:	2300      	movs	r3, #0
 800031e:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000322:	bd38      	pop	{r3, r4, r5, pc}
 8000324:	2018      	movs	r0, #24
 8000326:	f000 f8b3 	bl	8000490 <malloc>
 800032a:	4602      	mov	r2, r0
 800032c:	63a8      	str	r0, [r5, #56]	; 0x38
 800032e:	b178      	cbz	r0, 8000350 <srand+0x40>
 8000330:	2001      	movs	r0, #1
 8000332:	2100      	movs	r1, #0
 8000334:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <srand+0x50>)
 800033a:	480a      	ldr	r0, [pc, #40]	; (8000364 <srand+0x54>)
 800033c:	490a      	ldr	r1, [pc, #40]	; (8000368 <srand+0x58>)
 800033e:	6091      	str	r1, [r2, #8]
 8000340:	e9c2 0300 	strd	r0, r3, [r2]
 8000344:	230b      	movs	r3, #11
 8000346:	8193      	strh	r3, [r2, #12]
 8000348:	2300      	movs	r3, #0
 800034a:	e9c2 4304 	strd	r4, r3, [r2, #16]
 800034e:	bd38      	pop	{r3, r4, r5, pc}
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <srand+0x5c>)
 8000352:	4807      	ldr	r0, [pc, #28]	; (8000370 <srand+0x60>)
 8000354:	2142      	movs	r1, #66	; 0x42
 8000356:	f000 f853 	bl	8000400 <__assert_func>
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	e66d1234 	.word	0xe66d1234
 8000364:	abcd330e 	.word	0xabcd330e
 8000368:	0005deec 	.word	0x0005deec
 800036c:	0800316c 	.word	0x0800316c
 8000370:	08003184 	.word	0x08003184

08000374 <rand>:
 8000374:	b538      	push	{r3, r4, r5, lr}
 8000376:	4b19      	ldr	r3, [pc, #100]	; (80003dc <rand+0x68>)
 8000378:	681c      	ldr	r4, [r3, #0]
 800037a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800037c:	b18a      	cbz	r2, 80003a2 <rand+0x2e>
 800037e:	6913      	ldr	r3, [r2, #16]
 8000380:	4917      	ldr	r1, [pc, #92]	; (80003e0 <rand+0x6c>)
 8000382:	6954      	ldr	r4, [r2, #20]
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <rand+0x70>)
 8000386:	fb03 f101 	mul.w	r1, r3, r1
 800038a:	fb00 1104 	mla	r1, r0, r4, r1
 800038e:	fba3 3000 	umull	r3, r0, r3, r0
 8000392:	3301      	adds	r3, #1
 8000394:	eb41 0100 	adc.w	r1, r1, r0
 8000398:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800039c:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80003a0:	bd38      	pop	{r3, r4, r5, pc}
 80003a2:	2018      	movs	r0, #24
 80003a4:	f000 f874 	bl	8000490 <malloc>
 80003a8:	4602      	mov	r2, r0
 80003aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80003ac:	b188      	cbz	r0, 80003d2 <rand+0x5e>
 80003ae:	2401      	movs	r4, #1
 80003b0:	2500      	movs	r5, #0
 80003b2:	e9c2 4504 	strd	r4, r5, [r2, #16]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <rand+0x74>)
 80003b8:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <rand+0x78>)
 80003ba:	4809      	ldr	r0, [pc, #36]	; (80003e0 <rand+0x6c>)
 80003bc:	490c      	ldr	r1, [pc, #48]	; (80003f0 <rand+0x7c>)
 80003be:	6091      	str	r1, [r2, #8]
 80003c0:	e9c2 4300 	strd	r4, r3, [r2]
 80003c4:	230b      	movs	r3, #11
 80003c6:	8193      	strh	r3, [r2, #12]
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <rand+0x80>)
 80003ca:	4601      	mov	r1, r0
 80003cc:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80003d0:	bd38      	pop	{r3, r4, r5, pc}
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <rand+0x84>)
 80003d4:	4809      	ldr	r0, [pc, #36]	; (80003fc <rand+0x88>)
 80003d6:	214e      	movs	r1, #78	; 0x4e
 80003d8:	f000 f812 	bl	8000400 <__assert_func>
 80003dc:	20000000 	.word	0x20000000
 80003e0:	5851f42d 	.word	0x5851f42d
 80003e4:	4c957f2d 	.word	0x4c957f2d
 80003e8:	e66d1234 	.word	0xe66d1234
 80003ec:	abcd330e 	.word	0xabcd330e
 80003f0:	0005deec 	.word	0x0005deec
 80003f4:	4c957f2e 	.word	0x4c957f2e
 80003f8:	0800316c 	.word	0x0800316c
 80003fc:	08003184 	.word	0x08003184

08000400 <__assert_func>:
 8000400:	b500      	push	{lr}
 8000402:	4c0b      	ldr	r4, [pc, #44]	; (8000430 <__assert_func+0x30>)
 8000404:	6825      	ldr	r5, [r4, #0]
 8000406:	4614      	mov	r4, r2
 8000408:	68ee      	ldr	r6, [r5, #12]
 800040a:	461a      	mov	r2, r3
 800040c:	b085      	sub	sp, #20
 800040e:	4603      	mov	r3, r0
 8000410:	460d      	mov	r5, r1
 8000412:	b14c      	cbz	r4, 8000428 <__assert_func+0x28>
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <__assert_func+0x34>)
 8000416:	9500      	str	r5, [sp, #0]
 8000418:	e9cd 1401 	strd	r1, r4, [sp, #4]
 800041c:	4630      	mov	r0, r6
 800041e:	4906      	ldr	r1, [pc, #24]	; (8000438 <__assert_func+0x38>)
 8000420:	f000 f822 	bl	8000468 <fiprintf>
 8000424:	f000 fd6a 	bl	8000efc <abort>
 8000428:	4904      	ldr	r1, [pc, #16]	; (800043c <__assert_func+0x3c>)
 800042a:	460c      	mov	r4, r1
 800042c:	e7f3      	b.n	8000416 <__assert_func+0x16>
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000
 8000434:	080031b8 	.word	0x080031b8
 8000438:	080031c8 	.word	0x080031c8
 800043c:	080031c4 	.word	0x080031c4

08000440 <__assert>:
 8000440:	b508      	push	{r3, lr}
 8000442:	4613      	mov	r3, r2
 8000444:	2200      	movs	r2, #0
 8000446:	f7ff ffdb 	bl	8000400 <__assert_func>
 800044a:	bf00      	nop

0800044c <_fiprintf_r>:
 800044c:	b40c      	push	{r2, r3}
 800044e:	b500      	push	{lr}
 8000450:	b083      	sub	sp, #12
 8000452:	ab04      	add	r3, sp, #16
 8000454:	f853 2b04 	ldr.w	r2, [r3], #4
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	f000 f91b 	bl	8000694 <_vfiprintf_r>
 800045e:	b003      	add	sp, #12
 8000460:	f85d eb04 	ldr.w	lr, [sp], #4
 8000464:	b002      	add	sp, #8
 8000466:	4770      	bx	lr

08000468 <fiprintf>:
 8000468:	b40e      	push	{r1, r2, r3}
 800046a:	b510      	push	{r4, lr}
 800046c:	b083      	sub	sp, #12
 800046e:	ab05      	add	r3, sp, #20
 8000470:	4c06      	ldr	r4, [pc, #24]	; (800048c <fiprintf+0x24>)
 8000472:	f853 2b04 	ldr.w	r2, [r3], #4
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	4601      	mov	r1, r0
 800047a:	6820      	ldr	r0, [r4, #0]
 800047c:	f000 f90a 	bl	8000694 <_vfiprintf_r>
 8000480:	b003      	add	sp, #12
 8000482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000486:	b003      	add	sp, #12
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000000 	.word	0x20000000

08000490 <malloc>:
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <malloc+0xc>)
 8000492:	4601      	mov	r1, r0
 8000494:	6818      	ldr	r0, [r3, #0]
 8000496:	f000 b869 	b.w	800056c <_malloc_r>
 800049a:	bf00      	nop
 800049c:	20000000 	.word	0x20000000

080004a0 <free>:
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <free+0xc>)
 80004a2:	4601      	mov	r1, r0
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	f000 b803 	b.w	80004b0 <_free_r>
 80004aa:	bf00      	nop
 80004ac:	20000000 	.word	0x20000000

080004b0 <_free_r>:
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d051      	beq.n	8000558 <_free_r+0xa8>
 80004b4:	b538      	push	{r3, r4, r5, lr}
 80004b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80004ba:	1f0c      	subs	r4, r1, #4
 80004bc:	2b00      	cmp	r3, #0
 80004be:	bfb8      	it	lt
 80004c0:	18e4      	addlt	r4, r4, r3
 80004c2:	4605      	mov	r5, r0
 80004c4:	f001 fada 	bl	8001a7c <__malloc_lock>
 80004c8:	4a27      	ldr	r2, [pc, #156]	; (8000568 <_free_r+0xb8>)
 80004ca:	6813      	ldr	r3, [r2, #0]
 80004cc:	b12b      	cbz	r3, 80004da <_free_r+0x2a>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d90c      	bls.n	80004ec <_free_r+0x3c>
 80004d2:	6821      	ldr	r1, [r4, #0]
 80004d4:	1860      	adds	r0, r4, r1
 80004d6:	4283      	cmp	r3, r0
 80004d8:	d02c      	beq.n	8000534 <_free_r+0x84>
 80004da:	6063      	str	r3, [r4, #4]
 80004dc:	4628      	mov	r0, r5
 80004de:	6014      	str	r4, [r2, #0]
 80004e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80004e4:	f001 bacc 	b.w	8001a80 <__malloc_unlock>
 80004e8:	42a3      	cmp	r3, r4
 80004ea:	d80f      	bhi.n	800050c <_free_r+0x5c>
 80004ec:	461a      	mov	r2, r3
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f9      	bne.n	80004e8 <_free_r+0x38>
 80004f4:	6811      	ldr	r1, [r2, #0]
 80004f6:	1850      	adds	r0, r2, r1
 80004f8:	4284      	cmp	r4, r0
 80004fa:	d017      	beq.n	800052c <_free_r+0x7c>
 80004fc:	d32d      	bcc.n	800055a <_free_r+0xaa>
 80004fe:	6063      	str	r3, [r4, #4]
 8000500:	6054      	str	r4, [r2, #4]
 8000502:	4628      	mov	r0, r5
 8000504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000508:	f001 baba 	b.w	8001a80 <__malloc_unlock>
 800050c:	6811      	ldr	r1, [r2, #0]
 800050e:	1850      	adds	r0, r2, r1
 8000510:	42a0      	cmp	r0, r4
 8000512:	d015      	beq.n	8000540 <_free_r+0x90>
 8000514:	d821      	bhi.n	800055a <_free_r+0xaa>
 8000516:	6821      	ldr	r1, [r4, #0]
 8000518:	1860      	adds	r0, r4, r1
 800051a:	4283      	cmp	r3, r0
 800051c:	d1ef      	bne.n	80004fe <_free_r+0x4e>
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	4401      	add	r1, r0
 8000524:	e9c4 1300 	strd	r1, r3, [r4]
 8000528:	6054      	str	r4, [r2, #4]
 800052a:	e7ea      	b.n	8000502 <_free_r+0x52>
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	4419      	add	r1, r3
 8000530:	6011      	str	r1, [r2, #0]
 8000532:	e7e6      	b.n	8000502 <_free_r+0x52>
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4401      	add	r1, r0
 800053a:	e9c4 1300 	strd	r1, r3, [r4]
 800053e:	e7cd      	b.n	80004dc <_free_r+0x2c>
 8000540:	6820      	ldr	r0, [r4, #0]
 8000542:	4401      	add	r1, r0
 8000544:	1850      	adds	r0, r2, r1
 8000546:	4283      	cmp	r3, r0
 8000548:	6011      	str	r1, [r2, #0]
 800054a:	d1da      	bne.n	8000502 <_free_r+0x52>
 800054c:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000550:	4401      	add	r1, r0
 8000552:	e9c2 1300 	strd	r1, r3, [r2]
 8000556:	e7d4      	b.n	8000502 <_free_r+0x52>
 8000558:	4770      	bx	lr
 800055a:	230c      	movs	r3, #12
 800055c:	602b      	str	r3, [r5, #0]
 800055e:	4628      	mov	r0, r5
 8000560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000564:	f001 ba8c 	b.w	8001a80 <__malloc_unlock>
 8000568:	20000300 	.word	0x20000300

0800056c <_malloc_r>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	1ccd      	adds	r5, r1, #3
 8000570:	f025 0503 	bic.w	r5, r5, #3
 8000574:	3508      	adds	r5, #8
 8000576:	2d0c      	cmp	r5, #12
 8000578:	bf38      	it	cc
 800057a:	250c      	movcc	r5, #12
 800057c:	2d00      	cmp	r5, #0
 800057e:	4606      	mov	r6, r0
 8000580:	db23      	blt.n	80005ca <_malloc_r+0x5e>
 8000582:	42a9      	cmp	r1, r5
 8000584:	d821      	bhi.n	80005ca <_malloc_r+0x5e>
 8000586:	4f25      	ldr	r7, [pc, #148]	; (800061c <_malloc_r+0xb0>)
 8000588:	f001 fa78 	bl	8001a7c <__malloc_lock>
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	b322      	cbz	r2, 80005da <_malloc_r+0x6e>
 8000590:	4614      	mov	r4, r2
 8000592:	e003      	b.n	800059c <_malloc_r+0x30>
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	4622      	mov	r2, r4
 8000598:	b1fb      	cbz	r3, 80005da <_malloc_r+0x6e>
 800059a:	461c      	mov	r4, r3
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	1b5b      	subs	r3, r3, r5
 80005a0:	d4f8      	bmi.n	8000594 <_malloc_r+0x28>
 80005a2:	2b0b      	cmp	r3, #11
 80005a4:	d815      	bhi.n	80005d2 <_malloc_r+0x66>
 80005a6:	6863      	ldr	r3, [r4, #4]
 80005a8:	4294      	cmp	r4, r2
 80005aa:	bf0c      	ite	eq
 80005ac:	603b      	streq	r3, [r7, #0]
 80005ae:	6053      	strne	r3, [r2, #4]
 80005b0:	4630      	mov	r0, r6
 80005b2:	f001 fa65 	bl	8001a80 <__malloc_unlock>
 80005b6:	f104 000b 	add.w	r0, r4, #11
 80005ba:	1d23      	adds	r3, r4, #4
 80005bc:	f020 0007 	bic.w	r0, r0, #7
 80005c0:	1ac2      	subs	r2, r0, r3
 80005c2:	d001      	beq.n	80005c8 <_malloc_r+0x5c>
 80005c4:	1a1b      	subs	r3, r3, r0
 80005c6:	50a3      	str	r3, [r4, r2]
 80005c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ca:	230c      	movs	r3, #12
 80005cc:	6033      	str	r3, [r6, #0]
 80005ce:	2000      	movs	r0, #0
 80005d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005d2:	6023      	str	r3, [r4, #0]
 80005d4:	441c      	add	r4, r3
 80005d6:	6025      	str	r5, [r4, #0]
 80005d8:	e7ea      	b.n	80005b0 <_malloc_r+0x44>
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	b1c9      	cbz	r1, 8000612 <_malloc_r+0xa6>
 80005de:	4629      	mov	r1, r5
 80005e0:	4630      	mov	r0, r6
 80005e2:	f000 fb93 	bl	8000d0c <_sbrk_r>
 80005e6:	1c43      	adds	r3, r0, #1
 80005e8:	d00c      	beq.n	8000604 <_malloc_r+0x98>
 80005ea:	1cc4      	adds	r4, r0, #3
 80005ec:	f024 0403 	bic.w	r4, r4, #3
 80005f0:	42a0      	cmp	r0, r4
 80005f2:	d005      	beq.n	8000600 <_malloc_r+0x94>
 80005f4:	1a21      	subs	r1, r4, r0
 80005f6:	4630      	mov	r0, r6
 80005f8:	f000 fb88 	bl	8000d0c <_sbrk_r>
 80005fc:	3001      	adds	r0, #1
 80005fe:	d001      	beq.n	8000604 <_malloc_r+0x98>
 8000600:	6025      	str	r5, [r4, #0]
 8000602:	e7d5      	b.n	80005b0 <_malloc_r+0x44>
 8000604:	230c      	movs	r3, #12
 8000606:	4630      	mov	r0, r6
 8000608:	6033      	str	r3, [r6, #0]
 800060a:	f001 fa39 	bl	8001a80 <__malloc_unlock>
 800060e:	2000      	movs	r0, #0
 8000610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000612:	4630      	mov	r0, r6
 8000614:	f000 fb7a 	bl	8000d0c <_sbrk_r>
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	e7e0      	b.n	80005de <_malloc_r+0x72>
 800061c:	20000300 	.word	0x20000300

08000620 <__sfputc_r>:
 8000620:	6893      	ldr	r3, [r2, #8]
 8000622:	3b01      	subs	r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	6093      	str	r3, [r2, #8]
 8000628:	da05      	bge.n	8000636 <__sfputc_r+0x16>
 800062a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800062e:	4563      	cmp	r3, ip
 8000630:	db07      	blt.n	8000642 <__sfputc_r+0x22>
 8000632:	290a      	cmp	r1, #10
 8000634:	d005      	beq.n	8000642 <__sfputc_r+0x22>
 8000636:	6813      	ldr	r3, [r2, #0]
 8000638:	1c58      	adds	r0, r3, #1
 800063a:	6010      	str	r0, [r2, #0]
 800063c:	7019      	strb	r1, [r3, #0]
 800063e:	4608      	mov	r0, r1
 8000640:	4770      	bx	lr
 8000642:	f000 bb75 	b.w	8000d30 <__swbuf_r>
 8000646:	bf00      	nop

08000648 <__sfputs_r>:
 8000648:	b19b      	cbz	r3, 8000672 <__sfputs_r+0x2a>
 800064a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064c:	4413      	add	r3, r2
 800064e:	4606      	mov	r6, r0
 8000650:	460f      	mov	r7, r1
 8000652:	1e54      	subs	r4, r2, #1
 8000654:	1e5d      	subs	r5, r3, #1
 8000656:	e001      	b.n	800065c <__sfputs_r+0x14>
 8000658:	42ac      	cmp	r4, r5
 800065a:	d008      	beq.n	800066e <__sfputs_r+0x26>
 800065c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000660:	463a      	mov	r2, r7
 8000662:	4630      	mov	r0, r6
 8000664:	f7ff ffdc 	bl	8000620 <__sfputc_r>
 8000668:	1c43      	adds	r3, r0, #1
 800066a:	d1f5      	bne.n	8000658 <__sfputs_r+0x10>
 800066c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800066e:	2000      	movs	r0, #0
 8000670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000672:	2000      	movs	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__sprint_r>:
 8000678:	6893      	ldr	r3, [r2, #8]
 800067a:	b510      	push	{r4, lr}
 800067c:	4614      	mov	r4, r2
 800067e:	b913      	cbnz	r3, 8000686 <__sprint_r+0xe>
 8000680:	6053      	str	r3, [r2, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	bd10      	pop	{r4, pc}
 8000686:	f000 fe49 	bl	800131c <__sfvwrite_r>
 800068a:	2300      	movs	r3, #0
 800068c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8000690:	bd10      	pop	{r4, pc}
 8000692:	bf00      	nop

08000694 <_vfiprintf_r>:
 8000694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000698:	4688      	mov	r8, r1
 800069a:	b09f      	sub	sp, #124	; 0x7c
 800069c:	4615      	mov	r5, r2
 800069e:	461c      	mov	r4, r3
 80006a0:	4681      	mov	r9, r0
 80006a2:	b118      	cbz	r0, 80006ac <_vfiprintf_r+0x18>
 80006a4:	6983      	ldr	r3, [r0, #24]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 80a2 	beq.w	80007f0 <_vfiprintf_r+0x15c>
 80006ac:	4b92      	ldr	r3, [pc, #584]	; (80008f8 <_vfiprintf_r+0x264>)
 80006ae:	4598      	cmp	r8, r3
 80006b0:	f000 80a4 	beq.w	80007fc <_vfiprintf_r+0x168>
 80006b4:	4b91      	ldr	r3, [pc, #580]	; (80008fc <_vfiprintf_r+0x268>)
 80006b6:	4598      	cmp	r8, r3
 80006b8:	f000 80b1 	beq.w	800081e <_vfiprintf_r+0x18a>
 80006bc:	4b90      	ldr	r3, [pc, #576]	; (8000900 <_vfiprintf_r+0x26c>)
 80006be:	4598      	cmp	r8, r3
 80006c0:	bf08      	it	eq
 80006c2:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 80006c6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80006ca:	0718      	lsls	r0, r3, #28
 80006cc:	f140 809d 	bpl.w	800080a <_vfiprintf_r+0x176>
 80006d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f000 8098 	beq.w	800080a <_vfiprintf_r+0x176>
 80006da:	2300      	movs	r3, #0
 80006dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80006de:	7829      	ldrb	r1, [r5, #0]
 80006e0:	4e88      	ldr	r6, [pc, #544]	; (8000904 <_vfiprintf_r+0x270>)
 80006e2:	9405      	str	r4, [sp, #20]
 80006e4:	2320      	movs	r3, #32
 80006e6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80006ea:	2330      	movs	r3, #48	; 0x30
 80006ec:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80006f0:	2701      	movs	r7, #1
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d074      	beq.n	80007e0 <_vfiprintf_r+0x14c>
 80006f6:	462c      	mov	r4, r5
 80006f8:	460b      	mov	r3, r1
 80006fa:	e004      	b.n	8000706 <_vfiprintf_r+0x72>
 80006fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000700:	2b00      	cmp	r3, #0
 8000702:	f000 808f 	beq.w	8000824 <_vfiprintf_r+0x190>
 8000706:	2b25      	cmp	r3, #37	; 0x25
 8000708:	d1f8      	bne.n	80006fc <_vfiprintf_r+0x68>
 800070a:	ebb4 0b05 	subs.w	fp, r4, r5
 800070e:	f040 808c 	bne.w	800082a <_vfiprintf_r+0x196>
 8000712:	7823      	ldrb	r3, [r4, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d063      	beq.n	80007e0 <_vfiprintf_r+0x14c>
 8000718:	2300      	movs	r3, #0
 800071a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8000722:	9306      	str	r3, [sp, #24]
 8000724:	9309      	str	r3, [sp, #36]	; 0x24
 8000726:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800072a:	931c      	str	r3, [sp, #112]	; 0x70
 800072c:	3401      	adds	r4, #1
 800072e:	e004      	b.n	800073a <_vfiprintf_r+0xa6>
 8000730:	9a06      	ldr	r2, [sp, #24]
 8000732:	fa07 f303 	lsl.w	r3, r7, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	9306      	str	r3, [sp, #24]
 800073a:	4625      	mov	r5, r4
 800073c:	2205      	movs	r2, #5
 800073e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000742:	4630      	mov	r0, r6
 8000744:	f001 f834 	bl	80017b0 <memchr>
 8000748:	1b83      	subs	r3, r0, r6
 800074a:	2800      	cmp	r0, #0
 800074c:	d1f0      	bne.n	8000730 <_vfiprintf_r+0x9c>
 800074e:	9b06      	ldr	r3, [sp, #24]
 8000750:	06d9      	lsls	r1, r3, #27
 8000752:	bf44      	itt	mi
 8000754:	2220      	movmi	r2, #32
 8000756:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800075a:	7829      	ldrb	r1, [r5, #0]
 800075c:	071a      	lsls	r2, r3, #28
 800075e:	bf44      	itt	mi
 8000760:	222b      	movmi	r2, #43	; 0x2b
 8000762:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000766:	292a      	cmp	r1, #42	; 0x2a
 8000768:	d170      	bne.n	800084c <_vfiprintf_r+0x1b8>
 800076a:	9a05      	ldr	r2, [sp, #20]
 800076c:	6811      	ldr	r1, [r2, #0]
 800076e:	3204      	adds	r2, #4
 8000770:	2900      	cmp	r1, #0
 8000772:	9205      	str	r2, [sp, #20]
 8000774:	f2c0 809b 	blt.w	80008ae <_vfiprintf_r+0x21a>
 8000778:	9109      	str	r1, [sp, #36]	; 0x24
 800077a:	7869      	ldrb	r1, [r5, #1]
 800077c:	3501      	adds	r5, #1
 800077e:	292e      	cmp	r1, #46	; 0x2e
 8000780:	d076      	beq.n	8000870 <_vfiprintf_r+0x1dc>
 8000782:	4c61      	ldr	r4, [pc, #388]	; (8000908 <_vfiprintf_r+0x274>)
 8000784:	2203      	movs	r2, #3
 8000786:	4620      	mov	r0, r4
 8000788:	f001 f812 	bl	80017b0 <memchr>
 800078c:	b138      	cbz	r0, 800079e <_vfiprintf_r+0x10a>
 800078e:	9b06      	ldr	r3, [sp, #24]
 8000790:	1b00      	subs	r0, r0, r4
 8000792:	2440      	movs	r4, #64	; 0x40
 8000794:	fa04 f000 	lsl.w	r0, r4, r0
 8000798:	4303      	orrs	r3, r0
 800079a:	9306      	str	r3, [sp, #24]
 800079c:	3501      	adds	r5, #1
 800079e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80007a2:	485a      	ldr	r0, [pc, #360]	; (800090c <_vfiprintf_r+0x278>)
 80007a4:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80007a8:	2206      	movs	r2, #6
 80007aa:	f001 f801 	bl	80017b0 <memchr>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	f000 8083 	beq.w	80008ba <_vfiprintf_r+0x226>
 80007b4:	4b56      	ldr	r3, [pc, #344]	; (8000910 <_vfiprintf_r+0x27c>)
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d06d      	beq.n	8000896 <_vfiprintf_r+0x202>
 80007ba:	aa05      	add	r2, sp, #20
 80007bc:	9200      	str	r2, [sp, #0]
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <_vfiprintf_r+0x280>)
 80007c0:	4642      	mov	r2, r8
 80007c2:	a906      	add	r1, sp, #24
 80007c4:	4648      	mov	r0, r9
 80007c6:	f3af 8000 	nop.w
 80007ca:	9003      	str	r0, [sp, #12]
 80007cc:	9b03      	ldr	r3, [sp, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	d006      	beq.n	80007e0 <_vfiprintf_r+0x14c>
 80007d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80007d4:	9a03      	ldr	r2, [sp, #12]
 80007d6:	7829      	ldrb	r1, [r5, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	930b      	str	r3, [sp, #44]	; 0x2c
 80007dc:	2900      	cmp	r1, #0
 80007de:	d18a      	bne.n	80006f6 <_vfiprintf_r+0x62>
 80007e0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80007e4:	065b      	lsls	r3, r3, #25
 80007e6:	d417      	bmi.n	8000818 <_vfiprintf_r+0x184>
 80007e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80007ea:	b01f      	add	sp, #124	; 0x7c
 80007ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007f0:	f000 fd74 	bl	80012dc <__sinit>
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <_vfiprintf_r+0x264>)
 80007f6:	4598      	cmp	r8, r3
 80007f8:	f47f af5c 	bne.w	80006b4 <_vfiprintf_r+0x20>
 80007fc:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8000800:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000804:	0718      	lsls	r0, r3, #28
 8000806:	f53f af63 	bmi.w	80006d0 <_vfiprintf_r+0x3c>
 800080a:	4641      	mov	r1, r8
 800080c:	4648      	mov	r0, r9
 800080e:	f000 faf3 	bl	8000df8 <__swsetup_r>
 8000812:	2800      	cmp	r0, #0
 8000814:	f43f af61 	beq.w	80006da <_vfiprintf_r+0x46>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800081c:	e7e5      	b.n	80007ea <_vfiprintf_r+0x156>
 800081e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8000822:	e750      	b.n	80006c6 <_vfiprintf_r+0x32>
 8000824:	ebb4 0b05 	subs.w	fp, r4, r5
 8000828:	d0da      	beq.n	80007e0 <_vfiprintf_r+0x14c>
 800082a:	46aa      	mov	sl, r5
 800082c:	f1c5 0501 	rsb	r5, r5, #1
 8000830:	e003      	b.n	800083a <_vfiprintf_r+0x1a6>
 8000832:	4593      	cmp	fp, r2
 8000834:	d936      	bls.n	80008a4 <_vfiprintf_r+0x210>
 8000836:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800083a:	4642      	mov	r2, r8
 800083c:	4648      	mov	r0, r9
 800083e:	f7ff feef 	bl	8000620 <__sfputc_r>
 8000842:	3001      	adds	r0, #1
 8000844:	eb05 020a 	add.w	r2, r5, sl
 8000848:	d1f3      	bne.n	8000832 <_vfiprintf_r+0x19e>
 800084a:	e7c9      	b.n	80007e0 <_vfiprintf_r+0x14c>
 800084c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000850:	2a09      	cmp	r2, #9
 8000852:	d894      	bhi.n	800077e <_vfiprintf_r+0xea>
 8000854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000856:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800085a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800085e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000862:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000866:	2a09      	cmp	r2, #9
 8000868:	d9f5      	bls.n	8000856 <_vfiprintf_r+0x1c2>
 800086a:	292e      	cmp	r1, #46	; 0x2e
 800086c:	9309      	str	r3, [sp, #36]	; 0x24
 800086e:	d188      	bne.n	8000782 <_vfiprintf_r+0xee>
 8000870:	7869      	ldrb	r1, [r5, #1]
 8000872:	292a      	cmp	r1, #42	; 0x2a
 8000874:	d12b      	bne.n	80008ce <_vfiprintf_r+0x23a>
 8000876:	9b05      	ldr	r3, [sp, #20]
 8000878:	78a9      	ldrb	r1, [r5, #2]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	9207      	str	r2, [sp, #28]
 800087e:	3304      	adds	r3, #4
 8000880:	2a00      	cmp	r2, #0
 8000882:	f105 0002 	add.w	r0, r5, #2
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	bfb8      	it	lt
 800088a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800088e:	4605      	mov	r5, r0
 8000890:	bfb8      	it	lt
 8000892:	9307      	strlt	r3, [sp, #28]
 8000894:	e775      	b.n	8000782 <_vfiprintf_r+0xee>
 8000896:	9b05      	ldr	r3, [sp, #20]
 8000898:	3307      	adds	r3, #7
 800089a:	f023 0307 	bic.w	r3, r3, #7
 800089e:	3308      	adds	r3, #8
 80008a0:	9305      	str	r3, [sp, #20]
 80008a2:	e796      	b.n	80007d2 <_vfiprintf_r+0x13e>
 80008a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80008a6:	7823      	ldrb	r3, [r4, #0]
 80008a8:	445a      	add	r2, fp
 80008aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80008ac:	e732      	b.n	8000714 <_vfiprintf_r+0x80>
 80008ae:	4249      	negs	r1, r1
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	9109      	str	r1, [sp, #36]	; 0x24
 80008b6:	9306      	str	r3, [sp, #24]
 80008b8:	e75f      	b.n	800077a <_vfiprintf_r+0xe6>
 80008ba:	aa05      	add	r2, sp, #20
 80008bc:	9200      	str	r2, [sp, #0]
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_vfiprintf_r+0x280>)
 80008c0:	4642      	mov	r2, r8
 80008c2:	a906      	add	r1, sp, #24
 80008c4:	4648      	mov	r0, r9
 80008c6:	f000 f8c9 	bl	8000a5c <_printf_i>
 80008ca:	9003      	str	r0, [sp, #12]
 80008cc:	e77e      	b.n	80007cc <_vfiprintf_r+0x138>
 80008ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80008d2:	2300      	movs	r3, #0
 80008d4:	2a09      	cmp	r2, #9
 80008d6:	9307      	str	r3, [sp, #28]
 80008d8:	f105 0501 	add.w	r5, r5, #1
 80008dc:	f63f af51 	bhi.w	8000782 <_vfiprintf_r+0xee>
 80008e0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80008e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80008ec:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80008f0:	2a09      	cmp	r2, #9
 80008f2:	d9f5      	bls.n	80008e0 <_vfiprintf_r+0x24c>
 80008f4:	9307      	str	r3, [sp, #28]
 80008f6:	e744      	b.n	8000782 <_vfiprintf_r+0xee>
 80008f8:	0800314c 	.word	0x0800314c
 80008fc:	0800312c 	.word	0x0800312c
 8000900:	0800310c 	.word	0x0800310c
 8000904:	080031f8 	.word	0x080031f8
 8000908:	08003200 	.word	0x08003200
 800090c:	08003204 	.word	0x08003204
 8000910:	00000000 	.word	0x00000000
 8000914:	08000649 	.word	0x08000649

08000918 <vfiprintf>:
 8000918:	b410      	push	{r4}
 800091a:	4c04      	ldr	r4, [pc, #16]	; (800092c <vfiprintf+0x14>)
 800091c:	4684      	mov	ip, r0
 800091e:	4613      	mov	r3, r2
 8000920:	6820      	ldr	r0, [r4, #0]
 8000922:	bc10      	pop	{r4}
 8000924:	460a      	mov	r2, r1
 8000926:	4661      	mov	r1, ip
 8000928:	f7ff beb4 	b.w	8000694 <_vfiprintf_r>
 800092c:	20000000 	.word	0x20000000

08000930 <_printf_common>:
 8000930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000934:	4691      	mov	r9, r2
 8000936:	461e      	mov	r6, r3
 8000938:	690a      	ldr	r2, [r1, #16]
 800093a:	688b      	ldr	r3, [r1, #8]
 800093c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000940:	429a      	cmp	r2, r3
 8000942:	bfb8      	it	lt
 8000944:	461a      	movlt	r2, r3
 8000946:	f8c9 2000 	str.w	r2, [r9]
 800094a:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800094e:	460c      	mov	r4, r1
 8000950:	4605      	mov	r5, r0
 8000952:	b113      	cbz	r3, 800095a <_printf_common+0x2a>
 8000954:	3201      	adds	r2, #1
 8000956:	f8c9 2000 	str.w	r2, [r9]
 800095a:	6822      	ldr	r2, [r4, #0]
 800095c:	0691      	lsls	r1, r2, #26
 800095e:	d55d      	bpl.n	8000a1c <_printf_common+0xec>
 8000960:	f8d9 3000 	ldr.w	r3, [r9]
 8000964:	3302      	adds	r3, #2
 8000966:	f8c9 3000 	str.w	r3, [r9]
 800096a:	6822      	ldr	r2, [r4, #0]
 800096c:	f012 0f06 	tst.w	r2, #6
 8000970:	4611      	mov	r1, r2
 8000972:	d11e      	bne.n	80009b2 <_printf_common+0x82>
 8000974:	68e1      	ldr	r1, [r4, #12]
 8000976:	1acb      	subs	r3, r1, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	bfd8      	it	le
 800097c:	4611      	movle	r1, r2
 800097e:	dd18      	ble.n	80009b2 <_printf_common+0x82>
 8000980:	f104 0a19 	add.w	sl, r4, #25
 8000984:	2700      	movs	r7, #0
 8000986:	e006      	b.n	8000996 <_printf_common+0x66>
 8000988:	f8d9 3000 	ldr.w	r3, [r9]
 800098c:	68e2      	ldr	r2, [r4, #12]
 800098e:	eba2 0c03 	sub.w	ip, r2, r3
 8000992:	45bc      	cmp	ip, r7
 8000994:	dd0c      	ble.n	80009b0 <_printf_common+0x80>
 8000996:	2301      	movs	r3, #1
 8000998:	4652      	mov	r2, sl
 800099a:	4631      	mov	r1, r6
 800099c:	4628      	mov	r0, r5
 800099e:	47c0      	blx	r8
 80009a0:	3001      	adds	r0, #1
 80009a2:	f107 0701 	add.w	r7, r7, #1
 80009a6:	d1ef      	bne.n	8000988 <_printf_common+0x58>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b0:	6821      	ldr	r1, [r4, #0]
 80009b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80009b6:	3b00      	subs	r3, #0
 80009b8:	bf18      	it	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	068a      	lsls	r2, r1, #26
 80009be:	d50a      	bpl.n	80009d6 <_printf_common+0xa6>
 80009c0:	18e1      	adds	r1, r4, r3
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	2030      	movs	r0, #48	; 0x30
 80009c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80009ca:	4422      	add	r2, r4
 80009cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80009d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80009d4:	3302      	adds	r3, #2
 80009d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80009da:	4631      	mov	r1, r6
 80009dc:	4628      	mov	r0, r5
 80009de:	47c0      	blx	r8
 80009e0:	3001      	adds	r0, #1
 80009e2:	d0e1      	beq.n	80009a8 <_printf_common+0x78>
 80009e4:	6823      	ldr	r3, [r4, #0]
 80009e6:	f003 0306 	and.w	r3, r3, #6
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d01d      	beq.n	8000a2a <_printf_common+0xfa>
 80009ee:	68a3      	ldr	r3, [r4, #8]
 80009f0:	6922      	ldr	r2, [r4, #16]
 80009f2:	4293      	cmp	r3, r2
 80009f4:	dd25      	ble.n	8000a42 <_printf_common+0x112>
 80009f6:	2700      	movs	r7, #0
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	441f      	add	r7, r3
 80009fc:	f104 091a 	add.w	r9, r4, #26
 8000a00:	2400      	movs	r4, #0
 8000a02:	e001      	b.n	8000a08 <_printf_common+0xd8>
 8000a04:	42bc      	cmp	r4, r7
 8000a06:	da1c      	bge.n	8000a42 <_printf_common+0x112>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	4628      	mov	r0, r5
 8000a10:	47c0      	blx	r8
 8000a12:	3001      	adds	r0, #1
 8000a14:	f104 0401 	add.w	r4, r4, #1
 8000a18:	d1f4      	bne.n	8000a04 <_printf_common+0xd4>
 8000a1a:	e7c5      	b.n	80009a8 <_printf_common+0x78>
 8000a1c:	f012 0f06 	tst.w	r2, #6
 8000a20:	d012      	beq.n	8000a48 <_printf_common+0x118>
 8000a22:	3b00      	subs	r3, #0
 8000a24:	bf18      	it	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	e7d5      	b.n	80009d6 <_printf_common+0xa6>
 8000a2a:	f8d9 3000 	ldr.w	r3, [r9]
 8000a2e:	68e1      	ldr	r1, [r4, #12]
 8000a30:	6922      	ldr	r2, [r4, #16]
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	68a3      	ldr	r3, [r4, #8]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	ea21 77e1 	bic.w	r7, r1, r1, asr #31
 8000a3c:	dcdc      	bgt.n	80009f8 <_printf_common+0xc8>
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	dcdc      	bgt.n	80009fc <_printf_common+0xcc>
 8000a42:	2000      	movs	r0, #0
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	68e1      	ldr	r1, [r4, #12]
 8000a4a:	f8d9 3000 	ldr.w	r3, [r9]
 8000a4e:	1acb      	subs	r3, r1, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bfd8      	it	le
 8000a54:	4611      	movle	r1, r2
 8000a56:	dc93      	bgt.n	8000980 <_printf_common+0x50>
 8000a58:	e7ab      	b.n	80009b2 <_printf_common+0x82>
 8000a5a:	bf00      	nop

08000a5c <_printf_i>:
 8000a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a60:	4617      	mov	r7, r2
 8000a62:	b085      	sub	sp, #20
 8000a64:	7e0a      	ldrb	r2, [r1, #24]
 8000a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000a68:	460c      	mov	r4, r1
 8000a6a:	4606      	mov	r6, r0
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d033      	beq.n	8000ade <_printf_i+0x82>
 8000a76:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8000a7a:	b2d9      	uxtb	r1, r3
 8000a7c:	2920      	cmp	r1, #32
 8000a7e:	d867      	bhi.n	8000b50 <_printf_i+0xf4>
 8000a80:	2b20      	cmp	r3, #32
 8000a82:	d865      	bhi.n	8000b50 <_printf_i+0xf4>
 8000a84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000a88:	006400de 	.word	0x006400de
 8000a8c:	00640064 	.word	0x00640064
 8000a90:	00640064 	.word	0x00640064
 8000a94:	00640064 	.word	0x00640064
 8000a98:	00640064 	.word	0x00640064
 8000a9c:	00a30064 	.word	0x00a30064
 8000aa0:	0064006e 	.word	0x0064006e
 8000aa4:	00640064 	.word	0x00640064
 8000aa8:	006e0064 	.word	0x006e0064
 8000aac:	00640064 	.word	0x00640064
 8000ab0:	00640064 	.word	0x00640064
 8000ab4:	007f0021 	.word	0x007f0021
 8000ab8:	006400c0 	.word	0x006400c0
 8000abc:	00ae0064 	.word	0x00ae0064
 8000ac0:	007f0064 	.word	0x007f0064
 8000ac4:	00640064 	.word	0x00640064
 8000ac8:	00e5      	.short	0x00e5
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	061a      	lsls	r2, r3, #24
 8000ace:	f140 8104 	bpl.w	8000cda <_printf_i+0x27e>
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	6962      	ldr	r2, [r4, #20]
 8000ad6:	1d19      	adds	r1, r3, #4
 8000ad8:	6029      	str	r1, [r5, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	46e1      	mov	r9, ip
 8000ae2:	6123      	str	r3, [r4, #16]
 8000ae4:	f8cd 8000 	str.w	r8, [sp]
 8000ae8:	463b      	mov	r3, r7
 8000aea:	aa03      	add	r2, sp, #12
 8000aec:	4621      	mov	r1, r4
 8000aee:	4630      	mov	r0, r6
 8000af0:	f7ff ff1e 	bl	8000930 <_printf_common>
 8000af4:	3001      	adds	r0, #1
 8000af6:	d020      	beq.n	8000b3a <_printf_i+0xde>
 8000af8:	6923      	ldr	r3, [r4, #16]
 8000afa:	464a      	mov	r2, r9
 8000afc:	4639      	mov	r1, r7
 8000afe:	4630      	mov	r0, r6
 8000b00:	47c0      	blx	r8
 8000b02:	3001      	adds	r0, #1
 8000b04:	d019      	beq.n	8000b3a <_printf_i+0xde>
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	68e0      	ldr	r0, [r4, #12]
 8000b0a:	9903      	ldr	r1, [sp, #12]
 8000b0c:	079b      	lsls	r3, r3, #30
 8000b0e:	d519      	bpl.n	8000b44 <_printf_i+0xe8>
 8000b10:	1a43      	subs	r3, r0, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dd16      	ble.n	8000b44 <_printf_i+0xe8>
 8000b16:	f104 0919 	add.w	r9, r4, #25
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	e004      	b.n	8000b28 <_printf_i+0xcc>
 8000b1e:	68e0      	ldr	r0, [r4, #12]
 8000b20:	9903      	ldr	r1, [sp, #12]
 8000b22:	1a43      	subs	r3, r0, r1
 8000b24:	42ab      	cmp	r3, r5
 8000b26:	dd0d      	ble.n	8000b44 <_printf_i+0xe8>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	464a      	mov	r2, r9
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	4630      	mov	r0, r6
 8000b30:	47c0      	blx	r8
 8000b32:	3001      	adds	r0, #1
 8000b34:	f105 0501 	add.w	r5, r5, #1
 8000b38:	d1f1      	bne.n	8000b1e <_printf_i+0xc2>
 8000b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3e:	b005      	add	sp, #20
 8000b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b44:	4288      	cmp	r0, r1
 8000b46:	bfb8      	it	lt
 8000b48:	4608      	movlt	r0, r1
 8000b4a:	b005      	add	sp, #20
 8000b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b50:	2301      	movs	r3, #1
 8000b52:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000b56:	6123      	str	r3, [r4, #16]
 8000b58:	f104 0942 	add.w	r9, r4, #66	; 0x42
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000b62:	e7bf      	b.n	8000ae4 <_printf_i+0x88>
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	0619      	lsls	r1, r3, #24
 8000b68:	d402      	bmi.n	8000b70 <_printf_i+0x114>
 8000b6a:	065a      	lsls	r2, r3, #25
 8000b6c:	f100 80c1 	bmi.w	8000cf2 <_printf_i+0x296>
 8000b70:	6829      	ldr	r1, [r5, #0]
 8000b72:	680a      	ldr	r2, [r1, #0]
 8000b74:	3104      	adds	r1, #4
 8000b76:	6029      	str	r1, [r5, #0]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	db6b      	blt.n	8000c56 <_printf_i+0x1fa>
 8000b7e:	f8df e184 	ldr.w	lr, [pc, #388]	; 8000d04 <_printf_i+0x2a8>
 8000b82:	250a      	movs	r5, #10
 8000b84:	e010      	b.n	8000ba8 <_printf_i+0x14c>
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	0618      	lsls	r0, r3, #24
 8000b8a:	f140 809c 	bpl.w	8000cc6 <_printf_i+0x26a>
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	1d19      	adds	r1, r3, #4
 8000b92:	6029      	str	r1, [r5, #0]
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8000d04 <_printf_i+0x2a8>
 8000b9a:	2a6f      	cmp	r2, #111	; 0x6f
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2508      	moveq	r5, #8
 8000ba0:	250a      	movne	r5, #10
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ba8:	6862      	ldr	r2, [r4, #4]
 8000baa:	60a2      	str	r2, [r4, #8]
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	db7f      	blt.n	8000cb0 <_printf_i+0x254>
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	f023 0304 	bic.w	r3, r3, #4
 8000bb6:	6023      	str	r3, [r4, #0]
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	d15b      	bne.n	8000c74 <_printf_i+0x218>
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d179      	bne.n	8000cb4 <_printf_i+0x258>
 8000bc0:	46e1      	mov	r9, ip
 8000bc2:	2d08      	cmp	r5, #8
 8000bc4:	d065      	beq.n	8000c92 <_printf_i+0x236>
 8000bc6:	ebac 0309 	sub.w	r3, ip, r9
 8000bca:	6123      	str	r3, [r4, #16]
 8000bcc:	e78a      	b.n	8000ae4 <_printf_i+0x88>
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	602b      	str	r3, [r5, #0]
 8000bd8:	f104 0942 	add.w	r9, r4, #66	; 0x42
 8000bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000be0:	6122      	str	r2, [r4, #16]
 8000be2:	e7bb      	b.n	8000b5c <_printf_i+0x100>
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	6862      	ldr	r2, [r4, #4]
 8000be8:	1d19      	adds	r1, r3, #4
 8000bea:	6029      	str	r1, [r5, #0]
 8000bec:	f8d3 9000 	ldr.w	r9, [r3]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	f000 fddc 	bl	80017b0 <memchr>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	f000 8081 	beq.w	8000d00 <_printf_i+0x2a4>
 8000bfe:	eba0 0009 	sub.w	r0, r0, r9
 8000c02:	6060      	str	r0, [r4, #4]
 8000c04:	6120      	str	r0, [r4, #16]
 8000c06:	e7a9      	b.n	8000b5c <_printf_i+0x100>
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6023      	str	r3, [r4, #0]
 8000c10:	2278      	movs	r2, #120	; 0x78
 8000c12:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8000d08 <_printf_i+0x2ac>
 8000c16:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000c1a:	682a      	ldr	r2, [r5, #0]
 8000c1c:	1d11      	adds	r1, r2, #4
 8000c1e:	6029      	str	r1, [r5, #0]
 8000c20:	0619      	lsls	r1, r3, #24
 8000c22:	d443      	bmi.n	8000cac <_printf_i+0x250>
 8000c24:	065d      	lsls	r5, r3, #25
 8000c26:	d541      	bpl.n	8000cac <_printf_i+0x250>
 8000c28:	8811      	ldrh	r1, [r2, #0]
 8000c2a:	07d8      	lsls	r0, r3, #31
 8000c2c:	bf44      	itt	mi
 8000c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8000c32:	6023      	strmi	r3, [r4, #0]
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d144      	bne.n	8000cc2 <_printf_i+0x266>
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	f023 0320 	bic.w	r3, r3, #32
 8000c3e:	6023      	str	r3, [r4, #0]
 8000c40:	2510      	movs	r5, #16
 8000c42:	e7ae      	b.n	8000ba2 <_printf_i+0x146>
 8000c44:	2358      	movs	r3, #88	; 0x58
 8000c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c4a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8000d04 <_printf_i+0x2a8>
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	e7e3      	b.n	8000c1a <_printf_i+0x1be>
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	e7dc      	b.n	8000c10 <_printf_i+0x1b4>
 8000c56:	6862      	ldr	r2, [r4, #4]
 8000c58:	60a2      	str	r2, [r4, #8]
 8000c5a:	202d      	movs	r0, #45	; 0x2d
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f1c1 0100 	rsb	r1, r1, #0
 8000c62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000c66:	db02      	blt.n	8000c6e <_printf_i+0x212>
 8000c68:	f023 0304 	bic.w	r3, r3, #4
 8000c6c:	6023      	str	r3, [r4, #0]
 8000c6e:	f8df e094 	ldr.w	lr, [pc, #148]	; 8000d04 <_printf_i+0x2a8>
 8000c72:	250a      	movs	r5, #10
 8000c74:	46e1      	mov	r9, ip
 8000c76:	fbb1 f3f5 	udiv	r3, r1, r5
 8000c7a:	fb05 1013 	mls	r0, r5, r3, r1
 8000c7e:	460a      	mov	r2, r1
 8000c80:	42aa      	cmp	r2, r5
 8000c82:	f81e 1000 	ldrb.w	r1, [lr, r0]
 8000c86:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	d2f3      	bcs.n	8000c76 <_printf_i+0x21a>
 8000c8e:	2d08      	cmp	r5, #8
 8000c90:	d199      	bne.n	8000bc6 <_printf_i+0x16a>
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	07d9      	lsls	r1, r3, #31
 8000c96:	d596      	bpl.n	8000bc6 <_printf_i+0x16a>
 8000c98:	6862      	ldr	r2, [r4, #4]
 8000c9a:	6923      	ldr	r3, [r4, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dc92      	bgt.n	8000bc6 <_printf_i+0x16a>
 8000ca0:	2330      	movs	r3, #48	; 0x30
 8000ca2:	f809 3c01 	strb.w	r3, [r9, #-1]
 8000ca6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000caa:	e78c      	b.n	8000bc6 <_printf_i+0x16a>
 8000cac:	6811      	ldr	r1, [r2, #0]
 8000cae:	e7bc      	b.n	8000c2a <_printf_i+0x1ce>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d1df      	bne.n	8000c74 <_printf_i+0x218>
 8000cb4:	f89e 3000 	ldrb.w	r3, [lr]
 8000cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cbc:	f104 0942 	add.w	r9, r4, #66	; 0x42
 8000cc0:	e77f      	b.n	8000bc2 <_printf_i+0x166>
 8000cc2:	2510      	movs	r5, #16
 8000cc4:	e76d      	b.n	8000ba2 <_printf_i+0x146>
 8000cc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	f103 0104 	add.w	r1, r3, #4
 8000cd0:	6029      	str	r1, [r5, #0]
 8000cd2:	bf0c      	ite	eq
 8000cd4:	6819      	ldreq	r1, [r3, #0]
 8000cd6:	8819      	ldrhne	r1, [r3, #0]
 8000cd8:	e75d      	b.n	8000b96 <_printf_i+0x13a>
 8000cda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	6962      	ldr	r2, [r4, #20]
 8000ce2:	f103 0104 	add.w	r1, r3, #4
 8000ce6:	6029      	str	r1, [r5, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	bf14      	ite	ne
 8000cec:	801a      	strhne	r2, [r3, #0]
 8000cee:	601a      	streq	r2, [r3, #0]
 8000cf0:	e6f5      	b.n	8000ade <_printf_i+0x82>
 8000cf2:	682a      	ldr	r2, [r5, #0]
 8000cf4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000cf8:	3204      	adds	r2, #4
 8000cfa:	602a      	str	r2, [r5, #0]
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	e73c      	b.n	8000b7a <_printf_i+0x11e>
 8000d00:	6860      	ldr	r0, [r4, #4]
 8000d02:	e77f      	b.n	8000c04 <_printf_i+0x1a8>
 8000d04:	0800320c 	.word	0x0800320c
 8000d08:	08003220 	.word	0x08003220

08000d0c <_sbrk_r>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	4d07      	ldr	r5, [pc, #28]	; (8000d2c <_sbrk_r+0x20>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	602a      	str	r2, [r5, #0]
 8000d18:	f002 f9a0 	bl	800305c <_sbrk>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	d000      	beq.n	8000d22 <_sbrk_r+0x16>
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0fb      	beq.n	8000d20 <_sbrk_r+0x14>
 8000d28:	6023      	str	r3, [r4, #0]
 8000d2a:	bd38      	pop	{r3, r4, r5, pc}
 8000d2c:	20000308 	.word	0x20000308

08000d30 <__swbuf_r>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	460d      	mov	r5, r1
 8000d34:	4614      	mov	r4, r2
 8000d36:	4606      	mov	r6, r0
 8000d38:	b108      	cbz	r0, 8000d3e <__swbuf_r+0xe>
 8000d3a:	6983      	ldr	r3, [r0, #24]
 8000d3c:	b343      	cbz	r3, 8000d90 <__swbuf_r+0x60>
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <__swbuf_r+0xa4>)
 8000d40:	429c      	cmp	r4, r3
 8000d42:	d02a      	beq.n	8000d9a <__swbuf_r+0x6a>
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <__swbuf_r+0xa8>)
 8000d46:	429c      	cmp	r4, r3
 8000d48:	d029      	beq.n	8000d9e <__swbuf_r+0x6e>
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <__swbuf_r+0xac>)
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	bf08      	it	eq
 8000d50:	68f4      	ldreq	r4, [r6, #12]
 8000d52:	89a3      	ldrh	r3, [r4, #12]
 8000d54:	69a2      	ldr	r2, [r4, #24]
 8000d56:	60a2      	str	r2, [r4, #8]
 8000d58:	071a      	lsls	r2, r3, #28
 8000d5a:	d522      	bpl.n	8000da2 <__swbuf_r+0x72>
 8000d5c:	6923      	ldr	r3, [r4, #16]
 8000d5e:	b303      	cbz	r3, 8000da2 <__swbuf_r+0x72>
 8000d60:	6822      	ldr	r2, [r4, #0]
 8000d62:	6961      	ldr	r1, [r4, #20]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	b2ed      	uxtb	r5, r5
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	462f      	mov	r7, r5
 8000d6c:	dd29      	ble.n	8000dc2 <__swbuf_r+0x92>
 8000d6e:	3301      	adds	r3, #1
 8000d70:	68a1      	ldr	r1, [r4, #8]
 8000d72:	3901      	subs	r1, #1
 8000d74:	60a1      	str	r1, [r4, #8]
 8000d76:	1c51      	adds	r1, r2, #1
 8000d78:	6021      	str	r1, [r4, #0]
 8000d7a:	7015      	strb	r5, [r2, #0]
 8000d7c:	6962      	ldr	r2, [r4, #20]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d016      	beq.n	8000db0 <__swbuf_r+0x80>
 8000d82:	89a3      	ldrh	r3, [r4, #12]
 8000d84:	07db      	lsls	r3, r3, #31
 8000d86:	d501      	bpl.n	8000d8c <__swbuf_r+0x5c>
 8000d88:	2d0a      	cmp	r5, #10
 8000d8a:	d011      	beq.n	8000db0 <__swbuf_r+0x80>
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d90:	f000 faa4 	bl	80012dc <__sinit>
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <__swbuf_r+0xa4>)
 8000d96:	429c      	cmp	r4, r3
 8000d98:	d1d4      	bne.n	8000d44 <__swbuf_r+0x14>
 8000d9a:	6874      	ldr	r4, [r6, #4]
 8000d9c:	e7d9      	b.n	8000d52 <__swbuf_r+0x22>
 8000d9e:	68b4      	ldr	r4, [r6, #8]
 8000da0:	e7d7      	b.n	8000d52 <__swbuf_r+0x22>
 8000da2:	4621      	mov	r1, r4
 8000da4:	4630      	mov	r0, r6
 8000da6:	f000 f827 	bl	8000df8 <__swsetup_r>
 8000daa:	b938      	cbnz	r0, 8000dbc <__swbuf_r+0x8c>
 8000dac:	6923      	ldr	r3, [r4, #16]
 8000dae:	e7d7      	b.n	8000d60 <__swbuf_r+0x30>
 8000db0:	4621      	mov	r1, r4
 8000db2:	4630      	mov	r0, r6
 8000db4:	f000 f92c 	bl	8001010 <_fflush_r>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d0e7      	beq.n	8000d8c <__swbuf_r+0x5c>
 8000dbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000dc0:	e7e4      	b.n	8000d8c <__swbuf_r+0x5c>
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	f000 f923 	bl	8001010 <_fflush_r>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d1f6      	bne.n	8000dbc <__swbuf_r+0x8c>
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e7cd      	b.n	8000d70 <__swbuf_r+0x40>
 8000dd4:	0800314c 	.word	0x0800314c
 8000dd8:	0800312c 	.word	0x0800312c
 8000ddc:	0800310c 	.word	0x0800310c

08000de0 <__swbuf>:
 8000de0:	b410      	push	{r4}
 8000de2:	4c04      	ldr	r4, [pc, #16]	; (8000df4 <__swbuf+0x14>)
 8000de4:	4603      	mov	r3, r0
 8000de6:	460a      	mov	r2, r1
 8000de8:	6820      	ldr	r0, [r4, #0]
 8000dea:	bc10      	pop	{r4}
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff bf9f 	b.w	8000d30 <__swbuf_r>
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000

08000df8 <__swsetup_r>:
 8000df8:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <__swsetup_r+0xf4>)
 8000dfa:	b570      	push	{r4, r5, r6, lr}
 8000dfc:	681d      	ldr	r5, [r3, #0]
 8000dfe:	4606      	mov	r6, r0
 8000e00:	460c      	mov	r4, r1
 8000e02:	b10d      	cbz	r5, 8000e08 <__swsetup_r+0x10>
 8000e04:	69ab      	ldr	r3, [r5, #24]
 8000e06:	b1e3      	cbz	r3, 8000e42 <__swsetup_r+0x4a>
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <__swsetup_r+0xf8>)
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	d01f      	beq.n	8000e4e <__swsetup_r+0x56>
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <__swsetup_r+0xfc>)
 8000e10:	429c      	cmp	r4, r3
 8000e12:	d04d      	beq.n	8000eb0 <__swsetup_r+0xb8>
 8000e14:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <__swsetup_r+0x100>)
 8000e16:	429c      	cmp	r4, r3
 8000e18:	bf08      	it	eq
 8000e1a:	68ec      	ldreq	r4, [r5, #12]
 8000e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e20:	0718      	lsls	r0, r3, #28
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	d519      	bpl.n	8000e5a <__swsetup_r+0x62>
 8000e26:	6921      	ldr	r1, [r4, #16]
 8000e28:	b311      	cbz	r1, 8000e70 <__swsetup_r+0x78>
 8000e2a:	f012 0001 	ands.w	r0, r2, #1
 8000e2e:	d02f      	beq.n	8000e90 <__swsetup_r+0x98>
 8000e30:	2000      	movs	r0, #0
 8000e32:	60a0      	str	r0, [r4, #8]
 8000e34:	6960      	ldr	r0, [r4, #20]
 8000e36:	4240      	negs	r0, r0
 8000e38:	61a0      	str	r0, [r4, #24]
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	d02e      	beq.n	8000e9c <__swsetup_r+0xa4>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
 8000e42:	4628      	mov	r0, r5
 8000e44:	f000 fa4a 	bl	80012dc <__sinit>
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <__swsetup_r+0xf8>)
 8000e4a:	429c      	cmp	r4, r3
 8000e4c:	d1df      	bne.n	8000e0e <__swsetup_r+0x16>
 8000e4e:	686c      	ldr	r4, [r5, #4]
 8000e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e54:	0718      	lsls	r0, r3, #28
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	d4e5      	bmi.n	8000e26 <__swsetup_r+0x2e>
 8000e5a:	06d1      	lsls	r1, r2, #27
 8000e5c:	d53e      	bpl.n	8000edc <__swsetup_r+0xe4>
 8000e5e:	0752      	lsls	r2, r2, #29
 8000e60:	d428      	bmi.n	8000eb4 <__swsetup_r+0xbc>
 8000e62:	6921      	ldr	r1, [r4, #16]
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	81a3      	strh	r3, [r4, #12]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	d1dc      	bne.n	8000e2a <__swsetup_r+0x32>
 8000e70:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8000e74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e78:	d0d7      	beq.n	8000e2a <__swsetup_r+0x32>
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f000 fc05 	bl	800168c <__smakebuf_r>
 8000e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e86:	6921      	ldr	r1, [r4, #16]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	f012 0001 	ands.w	r0, r2, #1
 8000e8e:	d1cf      	bne.n	8000e30 <__swsetup_r+0x38>
 8000e90:	0795      	lsls	r5, r2, #30
 8000e92:	bf58      	it	pl
 8000e94:	6960      	ldrpl	r0, [r4, #20]
 8000e96:	60a0      	str	r0, [r4, #8]
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	d1d0      	bne.n	8000e3e <__swsetup_r+0x46>
 8000e9c:	0612      	lsls	r2, r2, #24
 8000e9e:	bf58      	it	pl
 8000ea0:	4608      	movpl	r0, r1
 8000ea2:	d5cd      	bpl.n	8000e40 <__swsetup_r+0x48>
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	81a3      	strh	r3, [r4, #12]
 8000eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eae:	bd70      	pop	{r4, r5, r6, pc}
 8000eb0:	68ac      	ldr	r4, [r5, #8]
 8000eb2:	e7b3      	b.n	8000e1c <__swsetup_r+0x24>
 8000eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000eb6:	b151      	cbz	r1, 8000ece <__swsetup_r+0xd6>
 8000eb8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000ebc:	4291      	cmp	r1, r2
 8000ebe:	d004      	beq.n	8000eca <__swsetup_r+0xd2>
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	f7ff faf5 	bl	80004b0 <_free_r>
 8000ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	6362      	str	r2, [r4, #52]	; 0x34
 8000ece:	6921      	ldr	r1, [r4, #16]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	e9c4 1200 	strd	r1, r2, [r4]
 8000ed6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000eda:	e7c3      	b.n	8000e64 <__swsetup_r+0x6c>
 8000edc:	2209      	movs	r2, #9
 8000ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee2:	6032      	str	r2, [r6, #0]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	81a3      	strh	r3, [r4, #12]
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	0800314c 	.word	0x0800314c
 8000ef4:	0800312c 	.word	0x0800312c
 8000ef8:	0800310c 	.word	0x0800310c

08000efc <abort>:
 8000efc:	b508      	push	{r3, lr}
 8000efe:	2006      	movs	r0, #6
 8000f00:	f000 fe7c 	bl	8001bfc <raise>
 8000f04:	2001      	movs	r0, #1
 8000f06:	f001 f83f 	bl	8001f88 <_exit>
 8000f0a:	bf00      	nop

08000f0c <__sflush_r>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	898b      	ldrh	r3, [r1, #12]
 8000f10:	460c      	mov	r4, r1
 8000f12:	0719      	lsls	r1, r3, #28
 8000f14:	4607      	mov	r7, r0
 8000f16:	d43a      	bmi.n	8000f8e <__sflush_r+0x82>
 8000f18:	6862      	ldr	r2, [r4, #4]
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	dd53      	ble.n	8000fc6 <__sflush_r+0xba>
 8000f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f20:	2e00      	cmp	r6, #0
 8000f22:	d04e      	beq.n	8000fc2 <__sflush_r+0xb6>
 8000f24:	2200      	movs	r2, #0
 8000f26:	683d      	ldr	r5, [r7, #0]
 8000f28:	603a      	str	r2, [r7, #0]
 8000f2a:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8000f2e:	d14e      	bne.n	8000fce <__sflush_r+0xc2>
 8000f30:	6a21      	ldr	r1, [r4, #32]
 8000f32:	2301      	movs	r3, #1
 8000f34:	4638      	mov	r0, r7
 8000f36:	47b0      	blx	r6
 8000f38:	1c42      	adds	r2, r0, #1
 8000f3a:	d05a      	beq.n	8000ff2 <__sflush_r+0xe6>
 8000f3c:	89a3      	ldrh	r3, [r4, #12]
 8000f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f40:	075b      	lsls	r3, r3, #29
 8000f42:	d505      	bpl.n	8000f50 <__sflush_r+0x44>
 8000f44:	6863      	ldr	r3, [r4, #4]
 8000f46:	1ac0      	subs	r0, r0, r3
 8000f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f4a:	b10b      	cbz	r3, 8000f50 <__sflush_r+0x44>
 8000f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f4e:	1ac0      	subs	r0, r0, r3
 8000f50:	6a21      	ldr	r1, [r4, #32]
 8000f52:	4602      	mov	r2, r0
 8000f54:	2300      	movs	r3, #0
 8000f56:	4638      	mov	r0, r7
 8000f58:	47b0      	blx	r6
 8000f5a:	1c41      	adds	r1, r0, #1
 8000f5c:	d139      	bne.n	8000fd2 <__sflush_r+0xc6>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d036      	beq.n	8000fd2 <__sflush_r+0xc6>
 8000f64:	2b1d      	cmp	r3, #29
 8000f66:	d001      	beq.n	8000f6c <__sflush_r+0x60>
 8000f68:	2b16      	cmp	r3, #22
 8000f6a:	d149      	bne.n	8001000 <__sflush_r+0xf4>
 8000f6c:	6923      	ldr	r3, [r4, #16]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	e9c4 3200 	strd	r3, r2, [r4]
 8000f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f76:	603d      	str	r5, [r7, #0]
 8000f78:	b319      	cbz	r1, 8000fc2 <__sflush_r+0xb6>
 8000f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f7e:	4299      	cmp	r1, r3
 8000f80:	d002      	beq.n	8000f88 <__sflush_r+0x7c>
 8000f82:	4638      	mov	r0, r7
 8000f84:	f7ff fa94 	bl	80004b0 <_free_r>
 8000f88:	2000      	movs	r0, #0
 8000f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8000f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8e:	6926      	ldr	r6, [r4, #16]
 8000f90:	b1be      	cbz	r6, 8000fc2 <__sflush_r+0xb6>
 8000f92:	6825      	ldr	r5, [r4, #0]
 8000f94:	6026      	str	r6, [r4, #0]
 8000f96:	079a      	lsls	r2, r3, #30
 8000f98:	bf0c      	ite	eq
 8000f9a:	6963      	ldreq	r3, [r4, #20]
 8000f9c:	2300      	movne	r3, #0
 8000f9e:	1bad      	subs	r5, r5, r6
 8000fa0:	60a3      	str	r3, [r4, #8]
 8000fa2:	e00c      	b.n	8000fbe <__sflush_r+0xb2>
 8000fa4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000fa8:	6a21      	ldr	r1, [r4, #32]
 8000faa:	462b      	mov	r3, r5
 8000fac:	4632      	mov	r2, r6
 8000fae:	4638      	mov	r0, r7
 8000fb0:	47e0      	blx	ip
 8000fb2:	f1b0 0c00 	subs.w	ip, r0, #0
 8000fb6:	eba5 050c 	sub.w	r5, r5, ip
 8000fba:	4466      	add	r6, ip
 8000fbc:	dd12      	ble.n	8000fe4 <__sflush_r+0xd8>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	dcf0      	bgt.n	8000fa4 <__sflush_r+0x98>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	dca8      	bgt.n	8000f1e <__sflush_r+0x12>
 8000fcc:	e7f9      	b.n	8000fc2 <__sflush_r+0xb6>
 8000fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fd0:	e7b6      	b.n	8000f40 <__sflush_r+0x34>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	6063      	str	r3, [r4, #4]
 8000fd6:	6923      	ldr	r3, [r4, #16]
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	89a3      	ldrh	r3, [r4, #12]
 8000fdc:	04db      	lsls	r3, r3, #19
 8000fde:	d5c9      	bpl.n	8000f74 <__sflush_r+0x68>
 8000fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8000fe2:	e7c7      	b.n	8000f74 <__sflush_r+0x68>
 8000fe4:	89a3      	ldrh	r3, [r4, #12]
 8000fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fee:	81a3      	strh	r3, [r4, #12]
 8000ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0a1      	beq.n	8000f3c <__sflush_r+0x30>
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	d006      	beq.n	800100a <__sflush_r+0xfe>
 8000ffc:	2b16      	cmp	r3, #22
 8000ffe:	d004      	beq.n	800100a <__sflush_r+0xfe>
 8001000:	89a3      	ldrh	r3, [r4, #12]
 8001002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001006:	81a3      	strh	r3, [r4, #12]
 8001008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100a:	603d      	str	r5, [r7, #0]
 800100c:	e7d9      	b.n	8000fc2 <__sflush_r+0xb6>
 800100e:	bf00      	nop

08001010 <_fflush_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	690b      	ldr	r3, [r1, #16]
 8001014:	b1bb      	cbz	r3, 8001046 <_fflush_r+0x36>
 8001016:	460c      	mov	r4, r1
 8001018:	4605      	mov	r5, r0
 800101a:	b108      	cbz	r0, 8001020 <_fflush_r+0x10>
 800101c:	6983      	ldr	r3, [r0, #24]
 800101e:	b1b3      	cbz	r3, 800104e <_fflush_r+0x3e>
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <_fflush_r+0x48>)
 8001022:	429c      	cmp	r4, r3
 8001024:	d011      	beq.n	800104a <_fflush_r+0x3a>
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <_fflush_r+0x4c>)
 8001028:	429c      	cmp	r4, r3
 800102a:	d013      	beq.n	8001054 <_fflush_r+0x44>
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <_fflush_r+0x50>)
 800102e:	429c      	cmp	r4, r3
 8001030:	bf08      	it	eq
 8001032:	68ec      	ldreq	r4, [r5, #12]
 8001034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001038:	b12b      	cbz	r3, 8001046 <_fflush_r+0x36>
 800103a:	4621      	mov	r1, r4
 800103c:	4628      	mov	r0, r5
 800103e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001042:	f7ff bf63 	b.w	8000f0c <__sflush_r>
 8001046:	2000      	movs	r0, #0
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	686c      	ldr	r4, [r5, #4]
 800104c:	e7f2      	b.n	8001034 <_fflush_r+0x24>
 800104e:	f000 f945 	bl	80012dc <__sinit>
 8001052:	e7e5      	b.n	8001020 <_fflush_r+0x10>
 8001054:	68ac      	ldr	r4, [r5, #8]
 8001056:	e7ed      	b.n	8001034 <_fflush_r+0x24>
 8001058:	0800314c 	.word	0x0800314c
 800105c:	0800312c 	.word	0x0800312c
 8001060:	0800310c 	.word	0x0800310c

08001064 <fflush>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	b340      	cbz	r0, 80010ba <fflush+0x56>
 8001068:	6903      	ldr	r3, [r0, #16]
 800106a:	4604      	mov	r4, r0
 800106c:	b1e3      	cbz	r3, 80010a8 <fflush+0x44>
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <fflush+0x68>)
 8001070:	681d      	ldr	r5, [r3, #0]
 8001072:	b10d      	cbz	r5, 8001078 <fflush+0x14>
 8001074:	69ab      	ldr	r3, [r5, #24]
 8001076:	b1cb      	cbz	r3, 80010ac <fflush+0x48>
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <fflush+0x6c>)
 800107a:	429c      	cmp	r4, r3
 800107c:	d00f      	beq.n	800109e <fflush+0x3a>
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <fflush+0x70>)
 8001080:	429c      	cmp	r4, r3
 8001082:	d021      	beq.n	80010c8 <fflush+0x64>
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <fflush+0x74>)
 8001086:	429c      	cmp	r4, r3
 8001088:	bf08      	it	eq
 800108a:	68ec      	ldreq	r4, [r5, #12]
 800108c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001090:	b153      	cbz	r3, 80010a8 <fflush+0x44>
 8001092:	4621      	mov	r1, r4
 8001094:	4628      	mov	r0, r5
 8001096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800109a:	f7ff bf37 	b.w	8000f0c <__sflush_r>
 800109e:	686c      	ldr	r4, [r5, #4]
 80010a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f4      	bne.n	8001092 <fflush+0x2e>
 80010a8:	2000      	movs	r0, #0
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
 80010ac:	4628      	mov	r0, r5
 80010ae:	f000 f915 	bl	80012dc <__sinit>
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <fflush+0x6c>)
 80010b4:	429c      	cmp	r4, r3
 80010b6:	d1e2      	bne.n	800107e <fflush+0x1a>
 80010b8:	e7f1      	b.n	800109e <fflush+0x3a>
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <fflush+0x78>)
 80010bc:	4908      	ldr	r1, [pc, #32]	; (80010e0 <fflush+0x7c>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010c4:	f000 babe 	b.w	8001644 <_fwalk_reent>
 80010c8:	68ac      	ldr	r4, [r5, #8]
 80010ca:	e7df      	b.n	800108c <fflush+0x28>
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0800314c 	.word	0x0800314c
 80010d4:	0800312c 	.word	0x0800312c
 80010d8:	0800310c 	.word	0x0800310c
 80010dc:	08003108 	.word	0x08003108
 80010e0:	08001011 	.word	0x08001011

080010e4 <__fp_lock>:
 80010e4:	2000      	movs	r0, #0
 80010e6:	4770      	bx	lr

080010e8 <_cleanup_r>:
 80010e8:	4901      	ldr	r1, [pc, #4]	; (80010f0 <_cleanup_r+0x8>)
 80010ea:	f000 baab 	b.w	8001644 <_fwalk_reent>
 80010ee:	bf00      	nop
 80010f0:	08001011 	.word	0x08001011

080010f4 <__fp_unlock>:
 80010f4:	2000      	movs	r0, #0
 80010f6:	4770      	bx	lr

080010f8 <__sfmoreglue>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	2268      	movs	r2, #104	; 0x68
 80010fc:	1e4d      	subs	r5, r1, #1
 80010fe:	fb02 f505 	mul.w	r5, r2, r5
 8001102:	460e      	mov	r6, r1
 8001104:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001108:	f7ff fa30 	bl	800056c <_malloc_r>
 800110c:	4604      	mov	r4, r0
 800110e:	b140      	cbz	r0, 8001122 <__sfmoreglue+0x2a>
 8001110:	2100      	movs	r1, #0
 8001112:	300c      	adds	r0, #12
 8001114:	e9c4 1600 	strd	r1, r6, [r4]
 8001118:	60a0      	str	r0, [r4, #8]
 800111a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800111e:	f7ff f8a5 	bl	800026c <memset>
 8001122:	4620      	mov	r0, r4
 8001124:	bd70      	pop	{r4, r5, r6, pc}
 8001126:	bf00      	nop

08001128 <__sfp>:
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <__sfp+0xa0>)
 800112a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112e:	681e      	ldr	r6, [r3, #0]
 8001130:	69b3      	ldr	r3, [r6, #24]
 8001132:	4607      	mov	r7, r0
 8001134:	b353      	cbz	r3, 800118c <__sfp+0x64>
 8001136:	3648      	adds	r6, #72	; 0x48
 8001138:	f04f 0804 	mov.w	r8, #4
 800113c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001140:	3b01      	subs	r3, #1
 8001142:	d504      	bpl.n	800114e <__sfp+0x26>
 8001144:	e01e      	b.n	8001184 <__sfp+0x5c>
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800114c:	d01a      	beq.n	8001184 <__sfp+0x5c>
 800114e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001152:	3b01      	subs	r3, #1
 8001154:	2d00      	cmp	r5, #0
 8001156:	d1f6      	bne.n	8001146 <__sfp+0x1e>
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <__sfp+0xa4>)
 800115a:	6665      	str	r5, [r4, #100]	; 0x64
 800115c:	e9c4 5500 	strd	r5, r5, [r4]
 8001160:	e9c4 5302 	strd	r5, r3, [r4, #8]
 8001164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001168:	61a5      	str	r5, [r4, #24]
 800116a:	2208      	movs	r2, #8
 800116c:	4629      	mov	r1, r5
 800116e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001172:	f7ff f87b 	bl	800026c <memset>
 8001176:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800117a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800117e:	4620      	mov	r0, r4
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	6835      	ldr	r5, [r6, #0]
 8001186:	b12d      	cbz	r5, 8001194 <__sfp+0x6c>
 8001188:	462e      	mov	r6, r5
 800118a:	e7d7      	b.n	800113c <__sfp+0x14>
 800118c:	4630      	mov	r0, r6
 800118e:	f000 f81f 	bl	80011d0 <__sinit.part.0>
 8001192:	e7d0      	b.n	8001136 <__sfp+0xe>
 8001194:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001198:	4638      	mov	r0, r7
 800119a:	f7ff f9e7 	bl	800056c <_malloc_r>
 800119e:	4604      	mov	r4, r0
 80011a0:	b168      	cbz	r0, 80011be <__sfp+0x96>
 80011a2:	6005      	str	r5, [r0, #0]
 80011a4:	f8c0 8004 	str.w	r8, [r0, #4]
 80011a8:	300c      	adds	r0, #12
 80011aa:	4629      	mov	r1, r5
 80011ac:	60a0      	str	r0, [r4, #8]
 80011ae:	4625      	mov	r5, r4
 80011b0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011b4:	f7ff f85a 	bl	800026c <memset>
 80011b8:	6034      	str	r4, [r6, #0]
 80011ba:	462e      	mov	r6, r5
 80011bc:	e7be      	b.n	800113c <__sfp+0x14>
 80011be:	230c      	movs	r3, #12
 80011c0:	6030      	str	r0, [r6, #0]
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	e7db      	b.n	800117e <__sfp+0x56>
 80011c6:	bf00      	nop
 80011c8:	08003108 	.word	0x08003108
 80011cc:	ffff0001 	.word	0xffff0001

080011d0 <__sinit.part.0>:
 80011d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <__sinit.part.0+0xd8>)
 80011d6:	4935      	ldr	r1, [pc, #212]	; (80012ac <__sinit.part.0+0xdc>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	6281      	str	r1, [r0, #40]	; 0x28
 80011dc:	4290      	cmp	r0, r2
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80011e6:	6503      	str	r3, [r0, #80]	; 0x50
 80011e8:	bf04      	itt	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	6183      	streq	r3, [r0, #24]
 80011ee:	4605      	mov	r5, r0
 80011f0:	f7ff ff9a 	bl	8001128 <__sfp>
 80011f4:	6068      	str	r0, [r5, #4]
 80011f6:	4628      	mov	r0, r5
 80011f8:	f7ff ff96 	bl	8001128 <__sfp>
 80011fc:	60a8      	str	r0, [r5, #8]
 80011fe:	4628      	mov	r0, r5
 8001200:	f7ff ff92 	bl	8001128 <__sfp>
 8001204:	686f      	ldr	r7, [r5, #4]
 8001206:	60e8      	str	r0, [r5, #12]
 8001208:	2400      	movs	r4, #0
 800120a:	2304      	movs	r3, #4
 800120c:	e9c7 4302 	strd	r4, r3, [r7, #8]
 8001210:	2208      	movs	r2, #8
 8001212:	4621      	mov	r1, r4
 8001214:	e9c7 4400 	strd	r4, r4, [r7]
 8001218:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800121c:	667c      	str	r4, [r7, #100]	; 0x64
 800121e:	61bc      	str	r4, [r7, #24]
 8001220:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001224:	f7ff f822 	bl	800026c <memset>
 8001228:	f8df b084 	ldr.w	fp, [pc, #132]	; 80012b0 <__sinit.part.0+0xe0>
 800122c:	68ae      	ldr	r6, [r5, #8]
 800122e:	f8df a084 	ldr.w	sl, [pc, #132]	; 80012b4 <__sinit.part.0+0xe4>
 8001232:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80012b8 <__sinit.part.0+0xe8>
 8001236:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80012bc <__sinit.part.0+0xec>
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <__sinit.part.0+0xf0>)
 800123c:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8001240:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 8001244:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8001248:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 800124c:	2208      	movs	r2, #8
 800124e:	60f3      	str	r3, [r6, #12]
 8001250:	e9c6 4400 	strd	r4, r4, [r6]
 8001254:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001258:	6674      	str	r4, [r6, #100]	; 0x64
 800125a:	60b4      	str	r4, [r6, #8]
 800125c:	61b4      	str	r4, [r6, #24]
 800125e:	4621      	mov	r1, r4
 8001260:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001264:	f7ff f802 	bl	800026c <memset>
 8001268:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 800126c:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8001270:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8001274:	68ee      	ldr	r6, [r5, #12]
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <__sinit.part.0+0xf4>)
 8001278:	60f3      	str	r3, [r6, #12]
 800127a:	e9c6 4400 	strd	r4, r4, [r6]
 800127e:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001282:	6674      	str	r4, [r6, #100]	; 0x64
 8001284:	60b4      	str	r4, [r6, #8]
 8001286:	61b4      	str	r4, [r6, #24]
 8001288:	4621      	mov	r1, r4
 800128a:	2208      	movs	r2, #8
 800128c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001290:	f7fe ffec 	bl	800026c <memset>
 8001294:	2301      	movs	r3, #1
 8001296:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 800129a:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 800129e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 80012a2:	61ab      	str	r3, [r5, #24]
 80012a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012a8:	08003108 	.word	0x08003108
 80012ac:	080010e9 	.word	0x080010e9
 80012b0:	08001d6d 	.word	0x08001d6d
 80012b4:	08001d95 	.word	0x08001d95
 80012b8:	08001dd5 	.word	0x08001dd5
 80012bc:	08001df5 	.word	0x08001df5
 80012c0:	00010009 	.word	0x00010009
 80012c4:	00020012 	.word	0x00020012

080012c8 <_cleanup>:
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <_cleanup+0xc>)
 80012ca:	4903      	ldr	r1, [pc, #12]	; (80012d8 <_cleanup+0x10>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f000 b9b9 	b.w	8001644 <_fwalk_reent>
 80012d2:	bf00      	nop
 80012d4:	08003108 	.word	0x08003108
 80012d8:	08001011 	.word	0x08001011

080012dc <__sinit>:
 80012dc:	6983      	ldr	r3, [r0, #24]
 80012de:	b903      	cbnz	r3, 80012e2 <__sinit+0x6>
 80012e0:	e776      	b.n	80011d0 <__sinit.part.0>
 80012e2:	4770      	bx	lr

080012e4 <__sfp_lock_acquire>:
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <__sfp_lock_release>:
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <__sinit_lock_acquire>:
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <__sinit_lock_release>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <__fp_lock_all>:
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <__fp_lock_all+0xc>)
 80012f6:	4903      	ldr	r1, [pc, #12]	; (8001304 <__fp_lock_all+0x10>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f000 b983 	b.w	8001604 <_fwalk>
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000
 8001304:	080010e5 	.word	0x080010e5

08001308 <__fp_unlock_all>:
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <__fp_unlock_all+0xc>)
 800130a:	4903      	ldr	r1, [pc, #12]	; (8001318 <__fp_unlock_all+0x10>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f000 b979 	b.w	8001604 <_fwalk>
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000
 8001318:	080010f5 	.word	0x080010f5

0800131c <__sfvwrite_r>:
 800131c:	6893      	ldr	r3, [r2, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8081 	beq.w	8001426 <__sfvwrite_r+0x10a>
 8001324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001328:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800132c:	460c      	mov	r4, r1
 800132e:	0719      	lsls	r1, r3, #28
 8001330:	4680      	mov	r8, r0
 8001332:	b083      	sub	sp, #12
 8001334:	4617      	mov	r7, r2
 8001336:	b298      	uxth	r0, r3
 8001338:	d523      	bpl.n	8001382 <__sfvwrite_r+0x66>
 800133a:	6923      	ldr	r3, [r4, #16]
 800133c:	b30b      	cbz	r3, 8001382 <__sfvwrite_r+0x66>
 800133e:	f010 0302 	ands.w	r3, r0, #2
 8001342:	683d      	ldr	r5, [r7, #0]
 8001344:	d02b      	beq.n	800139e <__sfvwrite_r+0x82>
 8001346:	f04f 0a00 	mov.w	sl, #0
 800134a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8001600 <__sfvwrite_r+0x2e4>
 800134e:	4656      	mov	r6, sl
 8001350:	455e      	cmp	r6, fp
 8001352:	4633      	mov	r3, r6
 8001354:	4652      	mov	r2, sl
 8001356:	bf28      	it	cs
 8001358:	465b      	movcs	r3, fp
 800135a:	4640      	mov	r0, r8
 800135c:	2e00      	cmp	r6, #0
 800135e:	d04f      	beq.n	8001400 <__sfvwrite_r+0xe4>
 8001360:	6a21      	ldr	r1, [r4, #32]
 8001362:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001366:	47e0      	blx	ip
 8001368:	2800      	cmp	r0, #0
 800136a:	dd52      	ble.n	8001412 <__sfvwrite_r+0xf6>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1a1b      	subs	r3, r3, r0
 8001370:	4482      	add	sl, r0
 8001372:	1a36      	subs	r6, r6, r0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ea      	bne.n	8001350 <__sfvwrite_r+0x34>
 800137a:	2000      	movs	r0, #0
 800137c:	b003      	add	sp, #12
 800137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001382:	4621      	mov	r1, r4
 8001384:	4640      	mov	r0, r8
 8001386:	f7ff fd37 	bl	8000df8 <__swsetup_r>
 800138a:	2800      	cmp	r0, #0
 800138c:	f040 8134 	bne.w	80015f8 <__sfvwrite_r+0x2dc>
 8001390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001394:	683d      	ldr	r5, [r7, #0]
 8001396:	b298      	uxth	r0, r3
 8001398:	f010 0302 	ands.w	r3, r0, #2
 800139c:	d1d3      	bne.n	8001346 <__sfvwrite_r+0x2a>
 800139e:	f010 0901 	ands.w	r9, r0, #1
 80013a2:	d142      	bne.n	800142a <__sfvwrite_r+0x10e>
 80013a4:	464e      	mov	r6, r9
 80013a6:	b33e      	cbz	r6, 80013f8 <__sfvwrite_r+0xdc>
 80013a8:	0582      	lsls	r2, r0, #22
 80013aa:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80013ae:	f140 8081 	bpl.w	80014b4 <__sfvwrite_r+0x198>
 80013b2:	45b3      	cmp	fp, r6
 80013b4:	465a      	mov	r2, fp
 80013b6:	f200 80b1 	bhi.w	800151c <__sfvwrite_r+0x200>
 80013ba:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80013be:	f040 80be 	bne.w	800153e <__sfvwrite_r+0x222>
 80013c2:	6820      	ldr	r0, [r4, #0]
 80013c4:	9201      	str	r2, [sp, #4]
 80013c6:	4649      	mov	r1, r9
 80013c8:	f000 fadc 	bl	8001984 <memmove>
 80013cc:	68a3      	ldr	r3, [r4, #8]
 80013ce:	6821      	ldr	r1, [r4, #0]
 80013d0:	9a01      	ldr	r2, [sp, #4]
 80013d2:	eba3 030b 	sub.w	r3, r3, fp
 80013d6:	440a      	add	r2, r1
 80013d8:	46b2      	mov	sl, r6
 80013da:	60a3      	str	r3, [r4, #8]
 80013dc:	6022      	str	r2, [r4, #0]
 80013de:	2600      	movs	r6, #0
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	eba0 000a 	sub.w	r0, r0, sl
 80013e6:	44d1      	add	r9, sl
 80013e8:	60b8      	str	r0, [r7, #8]
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d0c5      	beq.n	800137a <__sfvwrite_r+0x5e>
 80013ee:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80013f2:	b280      	uxth	r0, r0
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d1d7      	bne.n	80013a8 <__sfvwrite_r+0x8c>
 80013f8:	e9d5 9600 	ldrd	r9, r6, [r5]
 80013fc:	3508      	adds	r5, #8
 80013fe:	e7d2      	b.n	80013a6 <__sfvwrite_r+0x8a>
 8001400:	e9d5 a600 	ldrd	sl, r6, [r5]
 8001404:	3508      	adds	r5, #8
 8001406:	e7a3      	b.n	8001350 <__sfvwrite_r+0x34>
 8001408:	4621      	mov	r1, r4
 800140a:	4640      	mov	r0, r8
 800140c:	f7ff fe00 	bl	8001010 <_fflush_r>
 8001410:	b380      	cbz	r0, 8001474 <__sfvwrite_r+0x158>
 8001412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141e:	81a3      	strh	r3, [r4, #12]
 8001420:	b003      	add	sp, #12
 8001422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001426:	2000      	movs	r0, #0
 8001428:	4770      	bx	lr
 800142a:	461e      	mov	r6, r3
 800142c:	46aa      	mov	sl, r5
 800142e:	4699      	mov	r9, r3
 8001430:	4618      	mov	r0, r3
 8001432:	461d      	mov	r5, r3
 8001434:	b356      	cbz	r6, 800148c <__sfvwrite_r+0x170>
 8001436:	b388      	cbz	r0, 800149c <__sfvwrite_r+0x180>
 8001438:	464a      	mov	r2, r9
 800143a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 800143e:	6820      	ldr	r0, [r4, #0]
 8001440:	42b2      	cmp	r2, r6
 8001442:	bf28      	it	cs
 8001444:	4632      	movcs	r2, r6
 8001446:	4288      	cmp	r0, r1
 8001448:	d905      	bls.n	8001456 <__sfvwrite_r+0x13a>
 800144a:	68a1      	ldr	r1, [r4, #8]
 800144c:	eb03 0b01 	add.w	fp, r3, r1
 8001450:	455a      	cmp	r2, fp
 8001452:	f300 80a7 	bgt.w	80015a4 <__sfvwrite_r+0x288>
 8001456:	4293      	cmp	r3, r2
 8001458:	dc64      	bgt.n	8001524 <__sfvwrite_r+0x208>
 800145a:	6a21      	ldr	r1, [r4, #32]
 800145c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001460:	462a      	mov	r2, r5
 8001462:	4640      	mov	r0, r8
 8001464:	47e0      	blx	ip
 8001466:	f1b0 0b00 	subs.w	fp, r0, #0
 800146a:	ddd2      	ble.n	8001412 <__sfvwrite_r+0xf6>
 800146c:	ebb9 090b 	subs.w	r9, r9, fp
 8001470:	d0ca      	beq.n	8001408 <__sfvwrite_r+0xec>
 8001472:	2001      	movs	r0, #1
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	eba3 030b 	sub.w	r3, r3, fp
 800147a:	445d      	add	r5, fp
 800147c:	eba6 060b 	sub.w	r6, r6, fp
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f43f af79 	beq.w	800137a <__sfvwrite_r+0x5e>
 8001488:	2e00      	cmp	r6, #0
 800148a:	d1d4      	bne.n	8001436 <__sfvwrite_r+0x11a>
 800148c:	f10a 0308 	add.w	r3, sl, #8
 8001490:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8001494:	469a      	mov	sl, r3
 8001496:	3308      	adds	r3, #8
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0f9      	beq.n	8001490 <__sfvwrite_r+0x174>
 800149c:	4632      	mov	r2, r6
 800149e:	210a      	movs	r1, #10
 80014a0:	4628      	mov	r0, r5
 80014a2:	f000 f985 	bl	80017b0 <memchr>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	f000 809d 	beq.w	80015e6 <__sfvwrite_r+0x2ca>
 80014ac:	3001      	adds	r0, #1
 80014ae:	eba0 0905 	sub.w	r9, r0, r5
 80014b2:	e7c1      	b.n	8001438 <__sfvwrite_r+0x11c>
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	6923      	ldr	r3, [r4, #16]
 80014b8:	4298      	cmp	r0, r3
 80014ba:	d817      	bhi.n	80014ec <__sfvwrite_r+0x1d0>
 80014bc:	6963      	ldr	r3, [r4, #20]
 80014be:	42b3      	cmp	r3, r6
 80014c0:	d814      	bhi.n	80014ec <__sfvwrite_r+0x1d0>
 80014c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014c6:	42b2      	cmp	r2, r6
 80014c8:	bf28      	it	cs
 80014ca:	4632      	movcs	r2, r6
 80014cc:	6a21      	ldr	r1, [r4, #32]
 80014ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80014d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	4640      	mov	r0, r8
 80014dc:	464a      	mov	r2, r9
 80014de:	47e0      	blx	ip
 80014e0:	f1b0 0a00 	subs.w	sl, r0, #0
 80014e4:	dd95      	ble.n	8001412 <__sfvwrite_r+0xf6>
 80014e6:	eba6 060a 	sub.w	r6, r6, sl
 80014ea:	e779      	b.n	80013e0 <__sfvwrite_r+0xc4>
 80014ec:	45b3      	cmp	fp, r6
 80014ee:	46da      	mov	sl, fp
 80014f0:	bf28      	it	cs
 80014f2:	46b2      	movcs	sl, r6
 80014f4:	4652      	mov	r2, sl
 80014f6:	4649      	mov	r1, r9
 80014f8:	f000 fa44 	bl	8001984 <memmove>
 80014fc:	68a3      	ldr	r3, [r4, #8]
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	eba3 030a 	sub.w	r3, r3, sl
 8001504:	4452      	add	r2, sl
 8001506:	60a3      	str	r3, [r4, #8]
 8001508:	6022      	str	r2, [r4, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1eb      	bne.n	80014e6 <__sfvwrite_r+0x1ca>
 800150e:	4621      	mov	r1, r4
 8001510:	4640      	mov	r0, r8
 8001512:	f7ff fd7d 	bl	8001010 <_fflush_r>
 8001516:	2800      	cmp	r0, #0
 8001518:	d0e5      	beq.n	80014e6 <__sfvwrite_r+0x1ca>
 800151a:	e77a      	b.n	8001412 <__sfvwrite_r+0xf6>
 800151c:	6820      	ldr	r0, [r4, #0]
 800151e:	46b3      	mov	fp, r6
 8001520:	4632      	mov	r2, r6
 8001522:	e74f      	b.n	80013c4 <__sfvwrite_r+0xa8>
 8001524:	4629      	mov	r1, r5
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	f000 fa2c 	bl	8001984 <memmove>
 800152c:	9a01      	ldr	r2, [sp, #4]
 800152e:	68a3      	ldr	r3, [r4, #8]
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	60a3      	str	r3, [r4, #8]
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	4413      	add	r3, r2
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	4693      	mov	fp, r2
 800153c:	e796      	b.n	800146c <__sfvwrite_r+0x150>
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	6921      	ldr	r1, [r4, #16]
 8001542:	eba3 0b01 	sub.w	fp, r3, r1
 8001546:	6963      	ldr	r3, [r4, #20]
 8001548:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800154c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8001550:	f10b 0301 	add.w	r3, fp, #1
 8001554:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8001558:	4433      	add	r3, r6
 800155a:	4553      	cmp	r3, sl
 800155c:	4652      	mov	r2, sl
 800155e:	bf84      	itt	hi
 8001560:	469a      	movhi	sl, r3
 8001562:	4652      	movhi	r2, sl
 8001564:	0543      	lsls	r3, r0, #21
 8001566:	d52c      	bpl.n	80015c2 <__sfvwrite_r+0x2a6>
 8001568:	4611      	mov	r1, r2
 800156a:	4640      	mov	r0, r8
 800156c:	f7fe fffe 	bl	800056c <_malloc_r>
 8001570:	2800      	cmp	r0, #0
 8001572:	d03b      	beq.n	80015ec <__sfvwrite_r+0x2d0>
 8001574:	465a      	mov	r2, fp
 8001576:	6921      	ldr	r1, [r4, #16]
 8001578:	9001      	str	r0, [sp, #4]
 800157a:	f000 f969 	bl	8001850 <memcpy>
 800157e:	89a2      	ldrh	r2, [r4, #12]
 8001580:	9b01      	ldr	r3, [sp, #4]
 8001582:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158a:	81a2      	strh	r2, [r4, #12]
 800158c:	eb03 000b 	add.w	r0, r3, fp
 8001590:	6123      	str	r3, [r4, #16]
 8001592:	ebaa 030b 	sub.w	r3, sl, fp
 8001596:	f8c4 a014 	str.w	sl, [r4, #20]
 800159a:	60a3      	str	r3, [r4, #8]
 800159c:	6020      	str	r0, [r4, #0]
 800159e:	46b3      	mov	fp, r6
 80015a0:	4632      	mov	r2, r6
 80015a2:	e70f      	b.n	80013c4 <__sfvwrite_r+0xa8>
 80015a4:	4629      	mov	r1, r5
 80015a6:	465a      	mov	r2, fp
 80015a8:	f000 f9ec 	bl	8001984 <memmove>
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	445b      	add	r3, fp
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	4621      	mov	r1, r4
 80015b4:	4640      	mov	r0, r8
 80015b6:	f7ff fd2b 	bl	8001010 <_fflush_r>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	f43f af56 	beq.w	800146c <__sfvwrite_r+0x150>
 80015c0:	e727      	b.n	8001412 <__sfvwrite_r+0xf6>
 80015c2:	4640      	mov	r0, r8
 80015c4:	f000 fa5e 	bl	8001a84 <_realloc_r>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d1de      	bne.n	800158c <__sfvwrite_r+0x270>
 80015ce:	6921      	ldr	r1, [r4, #16]
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7fe ff6d 	bl	80004b0 <_free_r>
 80015d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015da:	220c      	movs	r2, #12
 80015dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015e0:	f8c8 2000 	str.w	r2, [r8]
 80015e4:	e717      	b.n	8001416 <__sfvwrite_r+0xfa>
 80015e6:	1c72      	adds	r2, r6, #1
 80015e8:	4691      	mov	r9, r2
 80015ea:	e726      	b.n	800143a <__sfvwrite_r+0x11e>
 80015ec:	220c      	movs	r2, #12
 80015ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015f2:	f8c8 2000 	str.w	r2, [r8]
 80015f6:	e70e      	b.n	8001416 <__sfvwrite_r+0xfa>
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015fc:	e6be      	b.n	800137c <__sfvwrite_r+0x60>
 80015fe:	bf00      	nop
 8001600:	7ffffc00 	.word	0x7ffffc00

08001604 <_fwalk>:
 8001604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001608:	4688      	mov	r8, r1
 800160a:	f100 0748 	add.w	r7, r0, #72	; 0x48
 800160e:	2600      	movs	r6, #0
 8001610:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001614:	3d01      	subs	r5, #1
 8001616:	d40f      	bmi.n	8001638 <_fwalk+0x34>
 8001618:	89a3      	ldrh	r3, [r4, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001620:	d906      	bls.n	8001630 <_fwalk+0x2c>
 8001622:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001626:	3301      	adds	r3, #1
 8001628:	4620      	mov	r0, r4
 800162a:	d001      	beq.n	8001630 <_fwalk+0x2c>
 800162c:	47c0      	blx	r8
 800162e:	4306      	orrs	r6, r0
 8001630:	1c6b      	adds	r3, r5, #1
 8001632:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001636:	d1ef      	bne.n	8001618 <_fwalk+0x14>
 8001638:	683f      	ldr	r7, [r7, #0]
 800163a:	2f00      	cmp	r7, #0
 800163c:	d1e8      	bne.n	8001610 <_fwalk+0xc>
 800163e:	4630      	mov	r0, r6
 8001640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001644 <_fwalk_reent>:
 8001644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001648:	4607      	mov	r7, r0
 800164a:	4688      	mov	r8, r1
 800164c:	f100 0648 	add.w	r6, r0, #72	; 0x48
 8001650:	f04f 0900 	mov.w	r9, #0
 8001654:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001658:	3d01      	subs	r5, #1
 800165a:	d411      	bmi.n	8001680 <_fwalk_reent+0x3c>
 800165c:	89a3      	ldrh	r3, [r4, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001664:	d908      	bls.n	8001678 <_fwalk_reent+0x34>
 8001666:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800166a:	3301      	adds	r3, #1
 800166c:	4621      	mov	r1, r4
 800166e:	d003      	beq.n	8001678 <_fwalk_reent+0x34>
 8001670:	4638      	mov	r0, r7
 8001672:	47c0      	blx	r8
 8001674:	ea49 0900 	orr.w	r9, r9, r0
 8001678:	1c6b      	adds	r3, r5, #1
 800167a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800167e:	d1ed      	bne.n	800165c <_fwalk_reent+0x18>
 8001680:	6836      	ldr	r6, [r6, #0]
 8001682:	2e00      	cmp	r6, #0
 8001684:	d1e6      	bne.n	8001654 <_fwalk_reent+0x10>
 8001686:	4648      	mov	r0, r9
 8001688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800168c <__smakebuf_r>:
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	898b      	ldrh	r3, [r1, #12]
 8001690:	460c      	mov	r4, r1
 8001692:	0799      	lsls	r1, r3, #30
 8001694:	b097      	sub	sp, #92	; 0x5c
 8001696:	d507      	bpl.n	80016a8 <__smakebuf_r+0x1c>
 8001698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800169c:	2201      	movs	r2, #1
 800169e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80016a2:	6023      	str	r3, [r4, #0]
 80016a4:	b017      	add	sp, #92	; 0x5c
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ac:	2900      	cmp	r1, #0
 80016ae:	4605      	mov	r5, r0
 80016b0:	db2d      	blt.n	800170e <__smakebuf_r+0x82>
 80016b2:	466a      	mov	r2, sp
 80016b4:	f000 fbca 	bl	8001e4c <_fstat_r>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	db27      	blt.n	800170c <__smakebuf_r+0x80>
 80016bc:	9e01      	ldr	r6, [sp, #4]
 80016be:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 80016c2:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80016c6:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 80016ca:	fab6 f686 	clz	r6, r6
 80016ce:	4639      	mov	r1, r7
 80016d0:	4628      	mov	r0, r5
 80016d2:	0976      	lsrs	r6, r6, #5
 80016d4:	f7fe ff4a 	bl	800056c <_malloc_r>
 80016d8:	b330      	cbz	r0, 8001728 <__smakebuf_r+0x9c>
 80016da:	89a3      	ldrh	r3, [r4, #12]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <__smakebuf_r+0xbc>)
 80016de:	62aa      	str	r2, [r5, #40]	; 0x28
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016e8:	81a3      	strh	r3, [r4, #12]
 80016ea:	6020      	str	r0, [r4, #0]
 80016ec:	2e00      	cmp	r6, #0
 80016ee:	d0d9      	beq.n	80016a4 <__smakebuf_r+0x18>
 80016f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016f4:	4628      	mov	r0, r5
 80016f6:	f000 fbbf 	bl	8001e78 <_isatty_r>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d0d2      	beq.n	80016a4 <__smakebuf_r+0x18>
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	f023 0303 	bic.w	r3, r3, #3
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	e7cb      	b.n	80016a4 <__smakebuf_r+0x18>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001712:	bf14      	ite	ne
 8001714:	2740      	movne	r7, #64	; 0x40
 8001716:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800171a:	4639      	mov	r1, r7
 800171c:	4628      	mov	r0, r5
 800171e:	2600      	movs	r6, #0
 8001720:	f7fe ff24 	bl	800056c <_malloc_r>
 8001724:	2800      	cmp	r0, #0
 8001726:	d1d8      	bne.n	80016da <__smakebuf_r+0x4e>
 8001728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172c:	059a      	lsls	r2, r3, #22
 800172e:	d4b9      	bmi.n	80016a4 <__smakebuf_r+0x18>
 8001730:	f023 0303 	bic.w	r3, r3, #3
 8001734:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	2101      	movs	r1, #1
 800173e:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8001742:	81a3      	strh	r3, [r4, #12]
 8001744:	6022      	str	r2, [r4, #0]
 8001746:	e7ad      	b.n	80016a4 <__smakebuf_r+0x18>
 8001748:	080010e9 	.word	0x080010e9

0800174c <__swhatbuf_r>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	460c      	mov	r4, r1
 8001750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001754:	2900      	cmp	r1, #0
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	4616      	mov	r6, r2
 800175a:	461d      	mov	r5, r3
 800175c:	db13      	blt.n	8001786 <__swhatbuf_r+0x3a>
 800175e:	466a      	mov	r2, sp
 8001760:	f000 fb74 	bl	8001e4c <_fstat_r>
 8001764:	2800      	cmp	r0, #0
 8001766:	db0e      	blt.n	8001786 <__swhatbuf_r+0x3a>
 8001768:	9901      	ldr	r1, [sp, #4]
 800176a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800176e:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 8001772:	fab1 f181 	clz	r1, r1
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	0949      	lsrs	r1, r1, #5
 800177c:	2000      	movs	r0, #0
 800177e:	6029      	str	r1, [r5, #0]
 8001780:	6033      	str	r3, [r6, #0]
 8001782:	b016      	add	sp, #88	; 0x58
 8001784:	bd70      	pop	{r4, r5, r6, pc}
 8001786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	602a      	str	r2, [r5, #0]
 8001790:	d504      	bpl.n	800179c <__swhatbuf_r+0x50>
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	2000      	movs	r0, #0
 8001796:	6033      	str	r3, [r6, #0]
 8001798:	b016      	add	sp, #88	; 0x58
 800179a:	bd70      	pop	{r4, r5, r6, pc}
 800179c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a0:	2000      	movs	r0, #0
 80017a2:	6033      	str	r3, [r6, #0]
 80017a4:	b016      	add	sp, #88	; 0x58
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
 80017a8:	0000      	movs	r0, r0
 80017aa:	0000      	movs	r0, r0
 80017ac:	0000      	movs	r0, r0
 80017ae:	0000      	movs	r0, r0

080017b0 <memchr>:
 80017b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80017b4:	2a10      	cmp	r2, #16
 80017b6:	db2b      	blt.n	8001810 <memchr+0x60>
 80017b8:	f010 0f07 	tst.w	r0, #7
 80017bc:	d008      	beq.n	80017d0 <memchr+0x20>
 80017be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80017c2:	3a01      	subs	r2, #1
 80017c4:	428b      	cmp	r3, r1
 80017c6:	d02d      	beq.n	8001824 <memchr+0x74>
 80017c8:	f010 0f07 	tst.w	r0, #7
 80017cc:	b342      	cbz	r2, 8001820 <memchr+0x70>
 80017ce:	d1f6      	bne.n	80017be <memchr+0xe>
 80017d0:	b4f0      	push	{r4, r5, r6, r7}
 80017d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80017d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80017da:	f022 0407 	bic.w	r4, r2, #7
 80017de:	f07f 0700 	mvns.w	r7, #0
 80017e2:	2300      	movs	r3, #0
 80017e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80017e8:	3c08      	subs	r4, #8
 80017ea:	ea85 0501 	eor.w	r5, r5, r1
 80017ee:	ea86 0601 	eor.w	r6, r6, r1
 80017f2:	fa85 f547 	uadd8	r5, r5, r7
 80017f6:	faa3 f587 	sel	r5, r3, r7
 80017fa:	fa86 f647 	uadd8	r6, r6, r7
 80017fe:	faa5 f687 	sel	r6, r5, r7
 8001802:	b98e      	cbnz	r6, 8001828 <memchr+0x78>
 8001804:	d1ee      	bne.n	80017e4 <memchr+0x34>
 8001806:	bcf0      	pop	{r4, r5, r6, r7}
 8001808:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800180c:	f002 0207 	and.w	r2, r2, #7
 8001810:	b132      	cbz	r2, 8001820 <memchr+0x70>
 8001812:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001816:	3a01      	subs	r2, #1
 8001818:	ea83 0301 	eor.w	r3, r3, r1
 800181c:	b113      	cbz	r3, 8001824 <memchr+0x74>
 800181e:	d1f8      	bne.n	8001812 <memchr+0x62>
 8001820:	2000      	movs	r0, #0
 8001822:	4770      	bx	lr
 8001824:	3801      	subs	r0, #1
 8001826:	4770      	bx	lr
 8001828:	2d00      	cmp	r5, #0
 800182a:	bf06      	itte	eq
 800182c:	4635      	moveq	r5, r6
 800182e:	3803      	subeq	r0, #3
 8001830:	3807      	subne	r0, #7
 8001832:	f015 0f01 	tst.w	r5, #1
 8001836:	d107      	bne.n	8001848 <memchr+0x98>
 8001838:	3001      	adds	r0, #1
 800183a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800183e:	bf02      	ittt	eq
 8001840:	3001      	addeq	r0, #1
 8001842:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001846:	3001      	addeq	r0, #1
 8001848:	bcf0      	pop	{r4, r5, r6, r7}
 800184a:	3801      	subs	r0, #1
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <memcpy>:
 8001850:	4684      	mov	ip, r0
 8001852:	ea41 0300 	orr.w	r3, r1, r0
 8001856:	f013 0303 	ands.w	r3, r3, #3
 800185a:	d16d      	bne.n	8001938 <memcpy+0xe8>
 800185c:	3a40      	subs	r2, #64	; 0x40
 800185e:	d341      	bcc.n	80018e4 <memcpy+0x94>
 8001860:	f851 3b04 	ldr.w	r3, [r1], #4
 8001864:	f840 3b04 	str.w	r3, [r0], #4
 8001868:	f851 3b04 	ldr.w	r3, [r1], #4
 800186c:	f840 3b04 	str.w	r3, [r0], #4
 8001870:	f851 3b04 	ldr.w	r3, [r1], #4
 8001874:	f840 3b04 	str.w	r3, [r0], #4
 8001878:	f851 3b04 	ldr.w	r3, [r1], #4
 800187c:	f840 3b04 	str.w	r3, [r0], #4
 8001880:	f851 3b04 	ldr.w	r3, [r1], #4
 8001884:	f840 3b04 	str.w	r3, [r0], #4
 8001888:	f851 3b04 	ldr.w	r3, [r1], #4
 800188c:	f840 3b04 	str.w	r3, [r0], #4
 8001890:	f851 3b04 	ldr.w	r3, [r1], #4
 8001894:	f840 3b04 	str.w	r3, [r0], #4
 8001898:	f851 3b04 	ldr.w	r3, [r1], #4
 800189c:	f840 3b04 	str.w	r3, [r0], #4
 80018a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018a4:	f840 3b04 	str.w	r3, [r0], #4
 80018a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018ac:	f840 3b04 	str.w	r3, [r0], #4
 80018b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018b4:	f840 3b04 	str.w	r3, [r0], #4
 80018b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018bc:	f840 3b04 	str.w	r3, [r0], #4
 80018c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018c4:	f840 3b04 	str.w	r3, [r0], #4
 80018c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018cc:	f840 3b04 	str.w	r3, [r0], #4
 80018d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018d4:	f840 3b04 	str.w	r3, [r0], #4
 80018d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018dc:	f840 3b04 	str.w	r3, [r0], #4
 80018e0:	3a40      	subs	r2, #64	; 0x40
 80018e2:	d2bd      	bcs.n	8001860 <memcpy+0x10>
 80018e4:	3230      	adds	r2, #48	; 0x30
 80018e6:	d311      	bcc.n	800190c <memcpy+0xbc>
 80018e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018ec:	f840 3b04 	str.w	r3, [r0], #4
 80018f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018f4:	f840 3b04 	str.w	r3, [r0], #4
 80018f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018fc:	f840 3b04 	str.w	r3, [r0], #4
 8001900:	f851 3b04 	ldr.w	r3, [r1], #4
 8001904:	f840 3b04 	str.w	r3, [r0], #4
 8001908:	3a10      	subs	r2, #16
 800190a:	d2ed      	bcs.n	80018e8 <memcpy+0x98>
 800190c:	320c      	adds	r2, #12
 800190e:	d305      	bcc.n	800191c <memcpy+0xcc>
 8001910:	f851 3b04 	ldr.w	r3, [r1], #4
 8001914:	f840 3b04 	str.w	r3, [r0], #4
 8001918:	3a04      	subs	r2, #4
 800191a:	d2f9      	bcs.n	8001910 <memcpy+0xc0>
 800191c:	3204      	adds	r2, #4
 800191e:	d008      	beq.n	8001932 <memcpy+0xe2>
 8001920:	07d2      	lsls	r2, r2, #31
 8001922:	bf1c      	itt	ne
 8001924:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001928:	f800 3b01 	strbne.w	r3, [r0], #1
 800192c:	d301      	bcc.n	8001932 <memcpy+0xe2>
 800192e:	880b      	ldrh	r3, [r1, #0]
 8001930:	8003      	strh	r3, [r0, #0]
 8001932:	4660      	mov	r0, ip
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	2a08      	cmp	r2, #8
 800193a:	d313      	bcc.n	8001964 <memcpy+0x114>
 800193c:	078b      	lsls	r3, r1, #30
 800193e:	d08d      	beq.n	800185c <memcpy+0xc>
 8001940:	f010 0303 	ands.w	r3, r0, #3
 8001944:	d08a      	beq.n	800185c <memcpy+0xc>
 8001946:	f1c3 0304 	rsb	r3, r3, #4
 800194a:	1ad2      	subs	r2, r2, r3
 800194c:	07db      	lsls	r3, r3, #31
 800194e:	bf1c      	itt	ne
 8001950:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001954:	f800 3b01 	strbne.w	r3, [r0], #1
 8001958:	d380      	bcc.n	800185c <memcpy+0xc>
 800195a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800195e:	f820 3b02 	strh.w	r3, [r0], #2
 8001962:	e77b      	b.n	800185c <memcpy+0xc>
 8001964:	3a04      	subs	r2, #4
 8001966:	d3d9      	bcc.n	800191c <memcpy+0xcc>
 8001968:	3a01      	subs	r2, #1
 800196a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800196e:	f800 3b01 	strb.w	r3, [r0], #1
 8001972:	d2f9      	bcs.n	8001968 <memcpy+0x118>
 8001974:	780b      	ldrb	r3, [r1, #0]
 8001976:	7003      	strb	r3, [r0, #0]
 8001978:	784b      	ldrb	r3, [r1, #1]
 800197a:	7043      	strb	r3, [r0, #1]
 800197c:	788b      	ldrb	r3, [r1, #2]
 800197e:	7083      	strb	r3, [r0, #2]
 8001980:	4660      	mov	r0, ip
 8001982:	4770      	bx	lr

08001984 <memmove>:
 8001984:	4288      	cmp	r0, r1
 8001986:	d90d      	bls.n	80019a4 <memmove+0x20>
 8001988:	188b      	adds	r3, r1, r2
 800198a:	4283      	cmp	r3, r0
 800198c:	d90a      	bls.n	80019a4 <memmove+0x20>
 800198e:	eb00 0c02 	add.w	ip, r0, r2
 8001992:	b1ba      	cbz	r2, 80019c4 <memmove+0x40>
 8001994:	4662      	mov	r2, ip
 8001996:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800199a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800199e:	4299      	cmp	r1, r3
 80019a0:	d1f9      	bne.n	8001996 <memmove+0x12>
 80019a2:	4770      	bx	lr
 80019a4:	2a0f      	cmp	r2, #15
 80019a6:	d80e      	bhi.n	80019c6 <memmove+0x42>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80019ae:	b14a      	cbz	r2, 80019c4 <memmove+0x40>
 80019b0:	f10c 0c01 	add.w	ip, ip, #1
 80019b4:	3b01      	subs	r3, #1
 80019b6:	448c      	add	ip, r1
 80019b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019c0:	4561      	cmp	r1, ip
 80019c2:	d1f9      	bne.n	80019b8 <memmove+0x34>
 80019c4:	4770      	bx	lr
 80019c6:	ea40 0301 	orr.w	r3, r0, r1
 80019ca:	079b      	lsls	r3, r3, #30
 80019cc:	d150      	bne.n	8001a70 <memmove+0xec>
 80019ce:	f1a2 0310 	sub.w	r3, r2, #16
 80019d2:	b570      	push	{r4, r5, r6, lr}
 80019d4:	f101 0c20 	add.w	ip, r1, #32
 80019d8:	f023 050f 	bic.w	r5, r3, #15
 80019dc:	f101 0e10 	add.w	lr, r1, #16
 80019e0:	f100 0410 	add.w	r4, r0, #16
 80019e4:	44ac      	add	ip, r5
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80019ec:	f844 5c10 	str.w	r5, [r4, #-16]
 80019f0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80019f4:	f844 5c0c 	str.w	r5, [r4, #-12]
 80019f8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80019fc:	f844 5c08 	str.w	r5, [r4, #-8]
 8001a00:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8001a04:	f844 5c04 	str.w	r5, [r4, #-4]
 8001a08:	f10e 0e10 	add.w	lr, lr, #16
 8001a0c:	45e6      	cmp	lr, ip
 8001a0e:	f104 0410 	add.w	r4, r4, #16
 8001a12:	d1e9      	bne.n	80019e8 <memmove+0x64>
 8001a14:	3301      	adds	r3, #1
 8001a16:	f012 0f0c 	tst.w	r2, #12
 8001a1a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8001a1e:	f002 040f 	and.w	r4, r2, #15
 8001a22:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001a26:	d027      	beq.n	8001a78 <memmove+0xf4>
 8001a28:	3c04      	subs	r4, #4
 8001a2a:	f024 0603 	bic.w	r6, r4, #3
 8001a2e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8001a32:	441e      	add	r6, r3
 8001a34:	1f1c      	subs	r4, r3, #4
 8001a36:	468e      	mov	lr, r1
 8001a38:	f85e 5b04 	ldr.w	r5, [lr], #4
 8001a3c:	f844 5f04 	str.w	r5, [r4, #4]!
 8001a40:	42b4      	cmp	r4, r6
 8001a42:	d1f9      	bne.n	8001a38 <memmove+0xb4>
 8001a44:	f10c 0401 	add.w	r4, ip, #1
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001a50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001a54:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001a58:	b14a      	cbz	r2, 8001a6e <memmove+0xea>
 8001a5a:	f10c 0c01 	add.w	ip, ip, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	448c      	add	ip, r1
 8001a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a6a:	4561      	cmp	r1, ip
 8001a6c:	d1f9      	bne.n	8001a62 <memmove+0xde>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001a74:	4603      	mov	r3, r0
 8001a76:	e79b      	b.n	80019b0 <memmove+0x2c>
 8001a78:	4622      	mov	r2, r4
 8001a7a:	e7eb      	b.n	8001a54 <memmove+0xd0>

08001a7c <__malloc_lock>:
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <__malloc_unlock>:
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <_realloc_r>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	4614      	mov	r4, r2
 8001a88:	b1f9      	cbz	r1, 8001aca <_realloc_r+0x46>
 8001a8a:	b1ca      	cbz	r2, 8001ac0 <_realloc_r+0x3c>
 8001a8c:	4606      	mov	r6, r0
 8001a8e:	460d      	mov	r5, r1
 8001a90:	f000 fa1a 	bl	8001ec8 <_malloc_usable_size_r>
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d302      	bcc.n	8001a9e <_realloc_r+0x1a>
 8001a98:	462f      	mov	r7, r5
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f7fe fd63 	bl	800056c <_malloc_r>
 8001aa6:	4607      	mov	r7, r0
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d0f6      	beq.n	8001a9a <_realloc_r+0x16>
 8001aac:	4622      	mov	r2, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7ff fece 	bl	8001850 <memcpy>
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fcfa 	bl	80004b0 <_free_r>
 8001abc:	4638      	mov	r0, r7
 8001abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac0:	4627      	mov	r7, r4
 8001ac2:	f7fe fcf5 	bl	80004b0 <_free_r>
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ace:	4611      	mov	r1, r2
 8001ad0:	f7fe bd4c 	b.w	800056c <_malloc_r>

08001ad4 <_init_signal_r>:
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ad8:	b10c      	cbz	r4, 8001ade <_init_signal_r+0xa>
 8001ada:	2000      	movs	r0, #0
 8001adc:	bd38      	pop	{r3, r4, r5, pc}
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	f7fe fd43 	bl	800056c <_malloc_r>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6468      	str	r0, [r5, #68]	; 0x44
 8001aea:	b130      	cbz	r0, 8001afa <_init_signal_r+0x26>
 8001aec:	1f03      	subs	r3, r0, #4
 8001aee:	327c      	adds	r2, #124	; 0x7c
 8001af0:	f843 4f04 	str.w	r4, [r3, #4]!
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d1fb      	bne.n	8001af0 <_init_signal_r+0x1c>
 8001af8:	e7ef      	b.n	8001ada <_init_signal_r+0x6>
 8001afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001afe:	bd38      	pop	{r3, r4, r5, pc}

08001b00 <_signal_r>:
 8001b00:	291f      	cmp	r1, #31
 8001b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b04:	4605      	mov	r5, r0
 8001b06:	d808      	bhi.n	8001b1a <_signal_r+0x1a>
 8001b08:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4617      	mov	r7, r2
 8001b0e:	b14e      	cbz	r6, 8001b24 <_signal_r+0x24>
 8001b10:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001b14:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8001b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b1a:	2316      	movs	r3, #22
 8001b1c:	6003      	str	r3, [r0, #0]
 8001b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	f7fe fd21 	bl	800056c <_malloc_r>
 8001b2a:	4606      	mov	r6, r0
 8001b2c:	6468      	str	r0, [r5, #68]	; 0x44
 8001b2e:	b140      	cbz	r0, 8001b42 <_signal_r+0x42>
 8001b30:	1f03      	subs	r3, r0, #4
 8001b32:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8001b36:	2100      	movs	r1, #0
 8001b38:	f843 1f04 	str.w	r1, [r3, #4]!
 8001b3c:	429d      	cmp	r5, r3
 8001b3e:	d1fb      	bne.n	8001b38 <_signal_r+0x38>
 8001b40:	e7e6      	b.n	8001b10 <_signal_r+0x10>
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b48 <_raise_r>:
 8001b48:	291f      	cmp	r1, #31
 8001b4a:	b538      	push	{r3, r4, r5, lr}
 8001b4c:	4605      	mov	r5, r0
 8001b4e:	d820      	bhi.n	8001b92 <_raise_r+0x4a>
 8001b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001b52:	460c      	mov	r4, r1
 8001b54:	b16a      	cbz	r2, 8001b72 <_raise_r+0x2a>
 8001b56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001b5a:	b153      	cbz	r3, 8001b72 <_raise_r+0x2a>
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d016      	beq.n	8001b8e <_raise_r+0x46>
 8001b60:	1c59      	adds	r1, r3, #1
 8001b62:	d010      	beq.n	8001b86 <_raise_r+0x3e>
 8001b64:	2500      	movs	r5, #0
 8001b66:	4620      	mov	r0, r4
 8001b68:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8001b6c:	4798      	blx	r3
 8001b6e:	4628      	mov	r0, r5
 8001b70:	bd38      	pop	{r3, r4, r5, pc}
 8001b72:	4628      	mov	r0, r5
 8001b74:	f000 f8f8 	bl	8001d68 <_getpid_r>
 8001b78:	4622      	mov	r2, r4
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b82:	f000 b8db 	b.w	8001d3c <_kill_r>
 8001b86:	2316      	movs	r3, #22
 8001b88:	6003      	str	r3, [r0, #0]
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	bd38      	pop	{r3, r4, r5, pc}
 8001b8e:	2000      	movs	r0, #0
 8001b90:	bd38      	pop	{r3, r4, r5, pc}
 8001b92:	2316      	movs	r3, #22
 8001b94:	6003      	str	r3, [r0, #0]
 8001b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}

08001b9c <__sigtramp_r>:
 8001b9c:	291f      	cmp	r1, #31
 8001b9e:	d82a      	bhi.n	8001bf6 <__sigtramp_r+0x5a>
 8001ba0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ba2:	b538      	push	{r3, r4, r5, lr}
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	b182      	cbz	r2, 8001bcc <__sigtramp_r+0x30>
 8001baa:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001bae:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001bb2:	b14b      	cbz	r3, 8001bc8 <__sigtramp_r+0x2c>
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	d019      	beq.n	8001bec <__sigtramp_r+0x50>
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d015      	beq.n	8001be8 <__sigtramp_r+0x4c>
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	6015      	str	r5, [r2, #0]
 8001bc2:	4798      	blx	r3
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	2001      	movs	r0, #1
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	f7fe fccd 	bl	800056c <_malloc_r>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6468      	str	r0, [r5, #68]	; 0x44
 8001bd6:	b158      	cbz	r0, 8001bf0 <__sigtramp_r+0x54>
 8001bd8:	1f03      	subs	r3, r0, #4
 8001bda:	2100      	movs	r1, #0
 8001bdc:	307c      	adds	r0, #124	; 0x7c
 8001bde:	f843 1f04 	str.w	r1, [r3, #4]!
 8001be2:	4298      	cmp	r0, r3
 8001be4:	d1fb      	bne.n	8001bde <__sigtramp_r+0x42>
 8001be6:	e7e0      	b.n	8001baa <__sigtramp_r+0xe>
 8001be8:	2003      	movs	r0, #3
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	2002      	movs	r0, #2
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfa:	4770      	bx	lr

08001bfc <raise>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <raise+0x54>)
 8001c00:	281f      	cmp	r0, #31
 8001c02:	681d      	ldr	r5, [r3, #0]
 8001c04:	d81f      	bhi.n	8001c46 <raise+0x4a>
 8001c06:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001c08:	4604      	mov	r4, r0
 8001c0a:	b162      	cbz	r2, 8001c26 <raise+0x2a>
 8001c0c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001c10:	b14b      	cbz	r3, 8001c26 <raise+0x2a>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d015      	beq.n	8001c42 <raise+0x46>
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	d00f      	beq.n	8001c3a <raise+0x3e>
 8001c1a:	2500      	movs	r5, #0
 8001c1c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8001c20:	4798      	blx	r3
 8001c22:	4628      	mov	r0, r5
 8001c24:	bd38      	pop	{r3, r4, r5, pc}
 8001c26:	4628      	mov	r0, r5
 8001c28:	f000 f89e 	bl	8001d68 <_getpid_r>
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	4601      	mov	r1, r0
 8001c30:	4628      	mov	r0, r5
 8001c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c36:	f000 b881 	b.w	8001d3c <_kill_r>
 8001c3a:	2316      	movs	r3, #22
 8001c3c:	602b      	str	r3, [r5, #0]
 8001c3e:	2001      	movs	r0, #1
 8001c40:	bd38      	pop	{r3, r4, r5, pc}
 8001c42:	2000      	movs	r0, #0
 8001c44:	bd38      	pop	{r3, r4, r5, pc}
 8001c46:	2316      	movs	r3, #22
 8001c48:	602b      	str	r3, [r5, #0]
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	20000000 	.word	0x20000000

08001c54 <signal>:
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <signal+0x4c>)
 8001c56:	281f      	cmp	r0, #31
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	d808      	bhi.n	8001c70 <signal+0x1c>
 8001c5e:	460d      	mov	r5, r1
 8001c60:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001c62:	4604      	mov	r4, r0
 8001c64:	b149      	cbz	r1, 8001c7a <signal+0x26>
 8001c66:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8001c6a:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
 8001c70:	2316      	movs	r3, #22
 8001c72:	6033      	str	r3, [r6, #0]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f7fe fc75 	bl	800056c <_malloc_r>
 8001c82:	4601      	mov	r1, r0
 8001c84:	6470      	str	r0, [r6, #68]	; 0x44
 8001c86:	b140      	cbz	r0, 8001c9a <signal+0x46>
 8001c88:	1f03      	subs	r3, r0, #4
 8001c8a:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f843 2f04 	str.w	r2, [r3, #4]!
 8001c94:	4563      	cmp	r3, ip
 8001c96:	d1fb      	bne.n	8001c90 <signal+0x3c>
 8001c98:	e7e5      	b.n	8001c66 <signal+0x12>
 8001c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <_init_signal>:
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <_init_signal+0x30>)
 8001ca8:	681d      	ldr	r5, [r3, #0]
 8001caa:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001cac:	b10c      	cbz	r4, 8001cb2 <_init_signal+0xe>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	bd38      	pop	{r3, r4, r5, pc}
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f7fe fc59 	bl	800056c <_malloc_r>
 8001cba:	6468      	str	r0, [r5, #68]	; 0x44
 8001cbc:	b138      	cbz	r0, 8001cce <_init_signal+0x2a>
 8001cbe:	1f03      	subs	r3, r0, #4
 8001cc0:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8001cc4:	f843 4f04 	str.w	r4, [r3, #4]!
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d1fb      	bne.n	8001cc4 <_init_signal+0x20>
 8001ccc:	e7ef      	b.n	8001cae <_init_signal+0xa>
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd2:	bd38      	pop	{r3, r4, r5, pc}
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <__sigtramp>:
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <__sigtramp+0x60>)
 8001cdc:	281f      	cmp	r0, #31
 8001cde:	681d      	ldr	r5, [r3, #0]
 8001ce0:	d826      	bhi.n	8001d30 <__sigtramp+0x58>
 8001ce2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	b182      	cbz	r2, 8001d0a <__sigtramp+0x32>
 8001ce8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001cec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001cf0:	b14b      	cbz	r3, 8001d06 <__sigtramp+0x2e>
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	d01a      	beq.n	8001d2c <__sigtramp+0x54>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d016      	beq.n	8001d28 <__sigtramp+0x50>
 8001cfa:	2500      	movs	r5, #0
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	6015      	str	r5, [r2, #0]
 8001d00:	4798      	blx	r3
 8001d02:	4628      	mov	r0, r5
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	2001      	movs	r0, #1
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7fe fc2d 	bl	800056c <_malloc_r>
 8001d12:	4602      	mov	r2, r0
 8001d14:	6468      	str	r0, [r5, #68]	; 0x44
 8001d16:	b158      	cbz	r0, 8001d30 <__sigtramp+0x58>
 8001d18:	1f03      	subs	r3, r0, #4
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	307c      	adds	r0, #124	; 0x7c
 8001d1e:	f843 1f04 	str.w	r1, [r3, #4]!
 8001d22:	4283      	cmp	r3, r0
 8001d24:	d1fb      	bne.n	8001d1e <__sigtramp+0x46>
 8001d26:	e7df      	b.n	8001ce8 <__sigtramp+0x10>
 8001d28:	2003      	movs	r0, #3
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <_kill_r>:
 8001d3c:	b570      	push	{r4, r5, r6, lr}
 8001d3e:	460c      	mov	r4, r1
 8001d40:	4d08      	ldr	r5, [pc, #32]	; (8001d64 <_kill_r+0x28>)
 8001d42:	4603      	mov	r3, r0
 8001d44:	2600      	movs	r6, #0
 8001d46:	4620      	mov	r0, r4
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461c      	mov	r4, r3
 8001d4c:	602e      	str	r6, [r5, #0]
 8001d4e:	f000 f8fb 	bl	8001f48 <_kill>
 8001d52:	1c43      	adds	r3, r0, #1
 8001d54:	d000      	beq.n	8001d58 <_kill_r+0x1c>
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0fb      	beq.n	8001d56 <_kill_r+0x1a>
 8001d5e:	6023      	str	r3, [r4, #0]
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	bf00      	nop
 8001d64:	20000308 	.word	0x20000308

08001d68 <_getpid_r>:
 8001d68:	f000 b8de 	b.w	8001f28 <_getpid>

08001d6c <__sread>:
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	460c      	mov	r4, r1
 8001d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d74:	f000 f8b2 	bl	8001edc <_read_r>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	db03      	blt.n	8001d84 <__sread+0x18>
 8001d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d7e:	4403      	add	r3, r0
 8001d80:	6563      	str	r3, [r4, #84]	; 0x54
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	89a3      	ldrh	r3, [r4, #12]
 8001d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d8a:	81a3      	strh	r3, [r4, #12]
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop

08001d90 <__seofread>:
 8001d90:	2000      	movs	r0, #0
 8001d92:	4770      	bx	lr

08001d94 <__swrite>:
 8001d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d98:	460c      	mov	r4, r1
 8001d9a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001d9e:	461f      	mov	r7, r3
 8001da0:	05cb      	lsls	r3, r1, #23
 8001da2:	4605      	mov	r5, r0
 8001da4:	4616      	mov	r6, r2
 8001da6:	d40b      	bmi.n	8001dc0 <__swrite+0x2c>
 8001da8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001dac:	81a1      	strh	r1, [r4, #12]
 8001dae:	463b      	mov	r3, r7
 8001db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001db4:	4632      	mov	r2, r6
 8001db6:	4628      	mov	r0, r5
 8001db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbc:	f000 b81e 	b.w	8001dfc <_write_r>
 8001dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f000 f868 	bl	8001e9c <_lseek_r>
 8001dcc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001dd0:	e7ea      	b.n	8001da8 <__swrite+0x14>
 8001dd2:	bf00      	nop

08001dd4 <__sseek>:
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ddc:	f000 f85e 	bl	8001e9c <_lseek_r>
 8001de0:	89a3      	ldrh	r3, [r4, #12]
 8001de2:	1c42      	adds	r2, r0, #1
 8001de4:	bf0e      	itee	eq
 8001de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001dee:	6560      	strne	r0, [r4, #84]	; 0x54
 8001df0:	81a3      	strh	r3, [r4, #12]
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <__sclose>:
 8001df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df8:	f000 b816 	b.w	8001e28 <_close_r>

08001dfc <_write_r>:
 8001dfc:	b538      	push	{r3, r4, r5, lr}
 8001dfe:	460c      	mov	r4, r1
 8001e00:	4d08      	ldr	r5, [pc, #32]	; (8001e24 <_write_r+0x28>)
 8001e02:	4684      	mov	ip, r0
 8001e04:	4611      	mov	r1, r2
 8001e06:	4620      	mov	r0, r4
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	602b      	str	r3, [r5, #0]
 8001e0e:	4664      	mov	r4, ip
 8001e10:	f000 f8b2 	bl	8001f78 <_write>
 8001e14:	1c43      	adds	r3, r0, #1
 8001e16:	d000      	beq.n	8001e1a <_write_r+0x1e>
 8001e18:	bd38      	pop	{r3, r4, r5, pc}
 8001e1a:	682b      	ldr	r3, [r5, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0fb      	beq.n	8001e18 <_write_r+0x1c>
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	bd38      	pop	{r3, r4, r5, pc}
 8001e24:	20000308 	.word	0x20000308

08001e28 <_close_r>:
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	4d07      	ldr	r5, [pc, #28]	; (8001e48 <_close_r+0x20>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	602a      	str	r2, [r5, #0]
 8001e34:	f000 f868 	bl	8001f08 <_close>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d000      	beq.n	8001e3e <_close_r+0x16>
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0fb      	beq.n	8001e3c <_close_r+0x14>
 8001e44:	6023      	str	r3, [r4, #0]
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
 8001e48:	20000308 	.word	0x20000308

08001e4c <_fstat_r>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	460c      	mov	r4, r1
 8001e50:	4d08      	ldr	r5, [pc, #32]	; (8001e74 <_fstat_r+0x28>)
 8001e52:	4603      	mov	r3, r0
 8001e54:	2600      	movs	r6, #0
 8001e56:	4620      	mov	r0, r4
 8001e58:	4611      	mov	r1, r2
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	602e      	str	r6, [r5, #0]
 8001e5e:	f000 f85b 	bl	8001f18 <_fstat>
 8001e62:	1c43      	adds	r3, r0, #1
 8001e64:	d000      	beq.n	8001e68 <_fstat_r+0x1c>
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0fb      	beq.n	8001e66 <_fstat_r+0x1a>
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
 8001e72:	bf00      	nop
 8001e74:	20000308 	.word	0x20000308

08001e78 <_isatty_r>:
 8001e78:	b538      	push	{r3, r4, r5, lr}
 8001e7a:	4d07      	ldr	r5, [pc, #28]	; (8001e98 <_isatty_r+0x20>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4604      	mov	r4, r0
 8001e80:	4608      	mov	r0, r1
 8001e82:	602a      	str	r2, [r5, #0]
 8001e84:	f000 f858 	bl	8001f38 <_isatty>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d000      	beq.n	8001e8e <_isatty_r+0x16>
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
 8001e8e:	682b      	ldr	r3, [r5, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0fb      	beq.n	8001e8c <_isatty_r+0x14>
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
 8001e98:	20000308 	.word	0x20000308

08001e9c <_lseek_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4d08      	ldr	r5, [pc, #32]	; (8001ec4 <_lseek_r+0x28>)
 8001ea2:	4684      	mov	ip, r0
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2300      	movs	r3, #0
 8001eac:	602b      	str	r3, [r5, #0]
 8001eae:	4664      	mov	r4, ip
 8001eb0:	f000 f852 	bl	8001f58 <_lseek>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d000      	beq.n	8001eba <_lseek_r+0x1e>
 8001eb8:	bd38      	pop	{r3, r4, r5, pc}
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0fb      	beq.n	8001eb8 <_lseek_r+0x1c>
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	20000308 	.word	0x20000308

08001ec8 <_malloc_usable_size_r>:
 8001ec8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	f1a0 0004 	sub.w	r0, r0, #4
 8001ed2:	bfbc      	itt	lt
 8001ed4:	580b      	ldrlt	r3, [r1, r0]
 8001ed6:	18c0      	addlt	r0, r0, r3
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop

08001edc <_read_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4d08      	ldr	r5, [pc, #32]	; (8001f04 <_read_r+0x28>)
 8001ee2:	4684      	mov	ip, r0
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2300      	movs	r3, #0
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	4664      	mov	r4, ip
 8001ef0:	f000 f83a 	bl	8001f68 <_read>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d000      	beq.n	8001efa <_read_r+0x1e>
 8001ef8:	bd38      	pop	{r3, r4, r5, pc}
 8001efa:	682b      	ldr	r3, [r5, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0fb      	beq.n	8001ef8 <_read_r+0x1c>
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	20000308 	.word	0x20000308

08001f08 <_close>:
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <_close+0xc>)
 8001f0a:	2258      	movs	r2, #88	; 0x58
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f12:	4770      	bx	lr
 8001f14:	20000308 	.word	0x20000308

08001f18 <_fstat>:
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <_fstat+0xc>)
 8001f1a:	2258      	movs	r2, #88	; 0x58
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f22:	4770      	bx	lr
 8001f24:	20000308 	.word	0x20000308

08001f28 <_getpid>:
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <_getpid+0xc>)
 8001f2a:	2258      	movs	r2, #88	; 0x58
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f32:	4770      	bx	lr
 8001f34:	20000308 	.word	0x20000308

08001f38 <_isatty>:
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <_isatty+0xc>)
 8001f3a:	2258      	movs	r2, #88	; 0x58
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000308 	.word	0x20000308

08001f48 <_kill>:
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <_kill+0xc>)
 8001f4a:	2258      	movs	r2, #88	; 0x58
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f52:	4770      	bx	lr
 8001f54:	20000308 	.word	0x20000308

08001f58 <_lseek>:
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <_lseek+0xc>)
 8001f5a:	2258      	movs	r2, #88	; 0x58
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f62:	4770      	bx	lr
 8001f64:	20000308 	.word	0x20000308

08001f68 <_read>:
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <_read+0xc>)
 8001f6a:	2258      	movs	r2, #88	; 0x58
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f72:	4770      	bx	lr
 8001f74:	20000308 	.word	0x20000308

08001f78 <_write>:
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <_write+0xc>)
 8001f7a:	2258      	movs	r2, #88	; 0x58
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f82:	4770      	bx	lr
 8001f84:	20000308 	.word	0x20000308

08001f88 <_exit>:
 8001f88:	e7fe      	b.n	8001f88 <_exit>
 8001f8a:	bf00      	nop

08001f8c <rand_uint32>:

// Include HAL and SimpleSerial headers
#include "hal.h"
#include "simpleserial.h"

uint32_t rand_uint32() {
 8001f8c:	b510      	push	{r4, lr}
    return ((uint32_t)rand() << 16) | ((uint32_t)rand() & 0xFFFF);
 8001f8e:	f7fe f9f1 	bl	8000374 <rand>
 8001f92:	4604      	mov	r4, r0
 8001f94:	f7fe f9ee 	bl	8000374 <rand>
 8001f98:	b280      	uxth	r0, r0
}
 8001f9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001f9e:	bd10      	pop	{r4, pc}

08001fa0 <get_pt>:
// SimpleSerial command handler for 'p' (process/plain) command
// Input 'data' contains 16 hex characters (8 bytes total)
// representing r0 (first 8 chars) and share0 (next 8 chars).
// Returns 0 on success.
uint8_t get_pt(uint8_t* data, uint8_t len) {
    if (len != 8) { // We expect 8 bytes (16 hex chars) converted by simpleserial
 8001fa0:	2908      	cmp	r1, #8
uint8_t get_pt(uint8_t* data, uint8_t len) {
 8001fa2:	b513      	push	{r0, r1, r4, lr}
 8001fa4:	4604      	mov	r4, r0
    if (len != 8) { // We expect 8 bytes (16 hex chars) converted by simpleserial
 8001fa6:	d11a      	bne.n	8001fde <get_pt+0x3e>
    uint32_t share0, share1;
    uint32_t result;

    zero = (uint32_t)0;
    one = (uint32_t)1;
    random = rand_uint32();
 8001fa8:	f7ff fff0 	bl	8001f8c <rand_uint32>


    share0 = (uint32_t)data[0] << 24 | (uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | data[3];
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	6864      	ldr	r4, [r4, #4]
 8001fb0:	ba1b      	rev	r3, r3
 8001fb2:	9300      	str	r3, [sp, #0]
    share1 = (uint32_t)data[4] << 24 | (uint32_t)data[5] << 16 | (uint32_t)data[6] << 8 | data[7];
 8001fb4:	ba24      	rev	r4, r4

    uint32_t target0, target1, target2;


    // --- Start of power trace capture ---
    trigger_high();
 8001fb6:	f000 f9f9 	bl	80023ac <trigger_high>
    
    // Microbenchmark
    asm volatile (
 8001fba:	466b      	mov	r3, sp
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	601c      	str	r4, [r3, #0]
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
		: "r" (&share0), "r" (share1)
		:
    );
    
    // --- End of power trace capture ---
    trigger_low();
 8001fca:	f000 f9f6 	bl	80023ba <trigger_low>

    uint8_t result_buf[4];

    // 'r' command, 4 bytes of data
    simpleserial_put('r', 4, result_buf);
 8001fce:	2072      	movs	r0, #114	; 0x72
 8001fd0:	aa01      	add	r2, sp, #4
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	f000 f944 	bl	8002260 <simpleserial_put>

    return 0; // Indicate success
 8001fd8:	2000      	movs	r0, #0
}
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd10      	pop	{r4, pc}
        return 1; 
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e7fb      	b.n	8001fda <get_pt+0x3a>
 8001fe2:	0000      	movs	r0, r0

08001fe4 <main>:


int main(void) {
 8001fe4:	b508      	push	{r3, lr}
    platform_init();
 8001fe6:	f000 f93f 	bl	8002268 <platform_init>

    init_uart();
 8001fea:	f000 f97d 	bl	80022e8 <init_uart>

    trigger_setup();
 8001fee:	f000 f9b9 	bl	8002364 <trigger_setup>
    simpleserial_init();
 8001ff2:	f000 f8bd 	bl	8002170 <simpleserial_init>

    // Register the SimpleSerial command 'p'
    // 'p': command character
    // 8: expected number of data bytes (16 hex characters input)
    // get_pt: callback function pointer
    simpleserial_addcmd('p', 8, get_pt);
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <main+0x24>)
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	2070      	movs	r0, #112	; 0x70
 8001ffc:	f000 f8b4 	bl	8002168 <simpleserial_addcmd>

    // Main loop: continuously check for and process incoming SimpleSerial data
    while (1) {
        simpleserial_get();
 8002000:	f000 f8cc 	bl	800219c <simpleserial_get>
    while (1) {
 8002004:	e7fc      	b.n	8002000 <main+0x1c>
 8002006:	bf00      	nop
 8002008:	08001fa1 	.word	0x08001fa1

0800200c <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 800200c:	2001      	movs	r0, #1
 800200e:	4770      	bx	lr

08002010 <simpleserial_put.part.0>:
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	4614      	mov	r4, r2
 8002014:	460e      	mov	r6, r1
{
	// Write first character
    if (!output) return;
	putch(c);
 8002016:	f000 f9f1 	bl	80023fc <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 800201a:	4f0c      	ldr	r7, [pc, #48]	; (800204c <simpleserial_put.part.0+0x3c>)
 800201c:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 800201e:	f1c4 0401 	rsb	r4, r4, #1
 8002022:	1963      	adds	r3, r4, r5
 8002024:	429e      	cmp	r6, r3
 8002026:	dc04      	bgt.n	8002032 <simpleserial_put.part.0+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 8002028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 800202c:	200a      	movs	r0, #10
 800202e:	f000 b9e5 	b.w	80023fc <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 8002032:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	5cf8      	ldrb	r0, [r7, r3]
 800203a:	f000 f9df 	bl	80023fc <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800203e:	782b      	ldrb	r3, [r5, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	5cf8      	ldrb	r0, [r7, r3]
 8002046:	f000 f9d9 	bl	80023fc <putch>
	for(int i = 0; i < size; i++)
 800204a:	e7ea      	b.n	8002022 <simpleserial_put.part.0+0x12>
 800204c:	080030f4 	.word	0x080030f4

08002050 <ss_num_commands>:
{
 8002050:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <ss_num_commands+0x20>)
 8002054:	f10d 0207 	add.w	r2, sp, #7
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!output) return;
 800205e:	2101      	movs	r1, #1
 8002060:	2072      	movs	r0, #114	; 0x72
 8002062:	f7ff ffd5 	bl	8002010 <simpleserial_put.part.0>
}
 8002066:	2000      	movs	r0, #0
 8002068:	b003      	add	sp, #12
 800206a:	f85d fb04 	ldr.w	pc, [sp], #4
 800206e:	bf00      	nop
 8002070:	20000080 	.word	0x20000080

08002074 <ss_get_commands>:
{
 8002074:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002076:	4c12      	ldr	r4, [pc, #72]	; (80020c0 <ss_get_commands+0x4c>)
 8002078:	6821      	ldr	r1, [r4, #0]
{
 800207a:	b098      	sub	sp, #96	; 0x60
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800207c:	b2cd      	uxtb	r5, r1
 800207e:	2000      	movs	r0, #0
 8002080:	b2c3      	uxtb	r3, r0
 8002082:	42ab      	cmp	r3, r5
 8002084:	f100 0001 	add.w	r0, r0, #1
 8002088:	db09      	blt.n	800209e <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * sizeof (ss_cmd_repr), (void *) repr_cmd_buf);
 800208a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800208e:	466a      	mov	r2, sp
 8002090:	b2c9      	uxtb	r1, r1
 8002092:	2072      	movs	r0, #114	; 0x72
 8002094:	f7ff ffbc 	bl	8002010 <simpleserial_put.part.0>
}
 8002098:	2000      	movs	r0, #0
 800209a:	b018      	add	sp, #96	; 0x60
 800209c:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 800209e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80020a2:	3260      	adds	r2, #96	; 0x60
 80020a4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80020a8:	446a      	add	r2, sp
 80020aa:	791e      	ldrb	r6, [r3, #4]
 80020ac:	f802 6c60 	strb.w	r6, [r2, #-96]
        repr_cmd_buf[i].len = commands[i].len;
 80020b0:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 80020b2:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 80020b4:	f802 6c5f 	strb.w	r6, [r2, #-95]
        repr_cmd_buf[i].flags = commands[i].flags;
 80020b8:	f802 3c5e 	strb.w	r3, [r2, #-94]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80020bc:	e7e0      	b.n	8002080 <ss_get_commands+0xc>
 80020be:	bf00      	nop
 80020c0:	20000080 	.word	0x20000080

080020c4 <hex_decode>:
{
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 80020c6:	2500      	movs	r5, #0
		char n_lo = ascii_buf[2*i+1];
 80020c8:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 80020ca:	4285      	cmp	r5, r0
 80020cc:	db01      	blt.n	80020d2 <hex_decode+0xe>
	return 0;
 80020ce:	2000      	movs	r0, #0
 80020d0:	e021      	b.n	8002116 <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 80020d2:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 80020d6:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 80020da:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80020de:	b2f6      	uxtb	r6, r6
 80020e0:	2e09      	cmp	r6, #9
 80020e2:	d80c      	bhi.n	80020fe <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 80020e4:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 80020e6:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80020ea:	b2e6      	uxtb	r6, r4
 80020ec:	2e09      	cmp	r6, #9
 80020ee:	d815      	bhi.n	800211c <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80020f0:	7813      	ldrb	r3, [r2, #0]
 80020f2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80020f6:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 80020f8:	3501      	adds	r5, #1
 80020fa:	3201      	adds	r2, #1
 80020fc:	e7e5      	b.n	80020ca <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80020fe:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002102:	2e05      	cmp	r6, #5
 8002104:	d802      	bhi.n	800210c <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8002106:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8002108:	7014      	strb	r4, [r2, #0]
 800210a:	e7ec      	b.n	80020e6 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 800210c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002110:	2e05      	cmp	r6, #5
 8002112:	d901      	bls.n	8002118 <hex_decode+0x54>
			return 1;
 8002114:	2001      	movs	r0, #1
}
 8002116:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8002118:	3c57      	subs	r4, #87	; 0x57
 800211a:	e7f5      	b.n	8002108 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 800211c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8002120:	2c05      	cmp	r4, #5
 8002122:	d802      	bhi.n	800212a <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8002124:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8002128:	e7e2      	b.n	80020f0 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800212a:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 800212e:	2c05      	cmp	r4, #5
 8002130:	d8f0      	bhi.n	8002114 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8002132:	7814      	ldrb	r4, [r2, #0]
 8002134:	3b57      	subs	r3, #87	; 0x57
 8002136:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 800213a:	e7dc      	b.n	80020f6 <hex_decode+0x32>

0800213c <simpleserial_addcmd_flags>:
{
 800213c:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 800213e:	4e09      	ldr	r6, [pc, #36]	; (8002164 <simpleserial_addcmd_flags+0x28>)
 8002140:	6834      	ldr	r4, [r6, #0]
 8002142:	2c1f      	cmp	r4, #31
 8002144:	dc0b      	bgt.n	800215e <simpleserial_addcmd_flags+0x22>
	if(len >= MAX_SS_LEN)
 8002146:	293f      	cmp	r1, #63	; 0x3f
 8002148:	d809      	bhi.n	800215e <simpleserial_addcmd_flags+0x22>
	commands[num_commands].c   = c;
 800214a:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].fp  = fp;
 800214e:	e9c5 1202 	strd	r1, r2, [r5, #8]
	num_commands++;
 8002152:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8002154:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8002156:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8002158:	6034      	str	r4, [r6, #0]
	return 0;
 800215a:	2000      	movs	r0, #0
}
 800215c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 800215e:	2001      	movs	r0, #1
 8002160:	e7fc      	b.n	800215c <simpleserial_addcmd_flags+0x20>
 8002162:	bf00      	nop
 8002164:	20000080 	.word	0x20000080

08002168 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8002168:	2300      	movs	r3, #0
 800216a:	f7ff bfe7 	b.w	800213c <simpleserial_addcmd_flags>
 800216e:	0000      	movs	r0, r0

08002170 <simpleserial_init>:
{
 8002170:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <simpleserial_init+0x20>)
 8002174:	2100      	movs	r1, #0
 8002176:	2076      	movs	r0, #118	; 0x76
 8002178:	f7ff fff6 	bl	8002168 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800217c:	4a05      	ldr	r2, [pc, #20]	; (8002194 <simpleserial_init+0x24>)
 800217e:	2077      	movs	r0, #119	; 0x77
 8002180:	f7ff fff2 	bl	8002168 <simpleserial_addcmd>
}
 8002184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8002188:	4a03      	ldr	r2, [pc, #12]	; (8002198 <simpleserial_init+0x28>)
 800218a:	2079      	movs	r0, #121	; 0x79
 800218c:	f7ff bfec 	b.w	8002168 <simpleserial_addcmd>
 8002190:	0800200d 	.word	0x0800200d
 8002194:	08002075 	.word	0x08002075
 8002198:	08002051 	.word	0x08002051

0800219c <simpleserial_get>:
{
 800219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 80021a0:	4d2e      	ldr	r5, [pc, #184]	; (800225c <simpleserial_get+0xc0>)
{
 80021a2:	b0b2      	sub	sp, #200	; 0xc8
	c = getch();
 80021a4:	f000 f910 	bl	80023c8 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 80021a8:	462a      	mov	r2, r5
 80021aa:	2300      	movs	r3, #0
 80021ac:	f852 1b04 	ldr.w	r1, [r2], #4
 80021b0:	4299      	cmp	r1, r3
 80021b2:	dc03      	bgt.n	80021bc <simpleserial_get+0x20>
	if(cmd == num_commands)
 80021b4:	d106      	bne.n	80021c4 <simpleserial_get+0x28>
}
 80021b6:	b032      	add	sp, #200	; 0xc8
 80021b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 80021bc:	011c      	lsls	r4, r3, #4
 80021be:	5ca4      	ldrb	r4, [r4, r2]
 80021c0:	4284      	cmp	r4, r0
 80021c2:	d13e      	bne.n	8002242 <simpleserial_get+0xa6>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80021c4:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 80021c8:	011e      	lsls	r6, r3, #4
 80021ca:	7c23      	ldrb	r3, [r4, #16]
 80021cc:	07db      	lsls	r3, r3, #31
 80021ce:	d514      	bpl.n	80021fa <simpleserial_get+0x5e>
		uint8_t l = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 80021d6:	f000 f8f7 	bl	80023c8 <getch>
 80021da:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		buff[1] = getch();
 80021de:	f000 f8f3 	bl	80023c8 <getch>
		if (hex_decode(1, buff, &l))
 80021e2:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 80021e4:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
		if (hex_decode(1, buff, &l))
 80021e8:	a912      	add	r1, sp, #72	; 0x48
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7ff ff6a 	bl	80020c4 <hex_decode>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d1e0      	bne.n	80021b6 <simpleserial_get+0x1a>
		commands[cmd].len = l;
 80021f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80021f8:	60a3      	str	r3, [r4, #8]
 80021fa:	af12      	add	r7, sp, #72	; 0x48
	for(cmd = 0; cmd < num_commands; cmd++)
 80021fc:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80021fe:	eb05 0806 	add.w	r8, r5, r6
 8002202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002206:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 800220a:	d31c      	bcc.n	8002246 <simpleserial_get+0xaa>
	c = getch();
 800220c:	f000 f8dc 	bl	80023c8 <getch>
	if(c != '\n' && c != '\r')
 8002210:	280a      	cmp	r0, #10
 8002212:	d001      	beq.n	8002218 <simpleserial_get+0x7c>
 8002214:	280d      	cmp	r0, #13
 8002216:	d1ce      	bne.n	80021b6 <simpleserial_get+0x1a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8002218:	4435      	add	r5, r6
 800221a:	aa02      	add	r2, sp, #8
 800221c:	68ac      	ldr	r4, [r5, #8]
 800221e:	a912      	add	r1, sp, #72	; 0x48
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ff4f 	bl	80020c4 <hex_decode>
 8002226:	2800      	cmp	r0, #0
 8002228:	d1c5      	bne.n	80021b6 <simpleserial_get+0x1a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800222a:	b2e1      	uxtb	r1, r4
 800222c:	68eb      	ldr	r3, [r5, #12]
 800222e:	a802      	add	r0, sp, #8
 8002230:	4798      	blx	r3
 8002232:	aa01      	add	r2, sp, #4
 8002234:	f88d 0004 	strb.w	r0, [sp, #4]
    if (!output) return;
 8002238:	2101      	movs	r1, #1
 800223a:	207a      	movs	r0, #122	; 0x7a
 800223c:	f7ff fee8 	bl	8002010 <simpleserial_put.part.0>
 8002240:	e7b9      	b.n	80021b6 <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
 8002242:	3301      	adds	r3, #1
 8002244:	e7b4      	b.n	80021b0 <simpleserial_get+0x14>
		c = getch();
 8002246:	f000 f8bf 	bl	80023c8 <getch>
		if(c == '\n' || c == '\r')
 800224a:	280a      	cmp	r0, #10
 800224c:	d0b3      	beq.n	80021b6 <simpleserial_get+0x1a>
 800224e:	280d      	cmp	r0, #13
 8002250:	d0b1      	beq.n	80021b6 <simpleserial_get+0x1a>
		ascii_buf[i] = c;
 8002252:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8002256:	3401      	adds	r4, #1
 8002258:	e7d3      	b.n	8002202 <simpleserial_get+0x66>
 800225a:	bf00      	nop
 800225c:	20000080 	.word	0x20000080

08002260 <simpleserial_put>:
    if (!output) return;
 8002260:	b10a      	cbz	r2, 8002266 <simpleserial_put+0x6>
 8002262:	f7ff bed5 	b.w	8002010 <simpleserial_put.part.0>
}
 8002266:	4770      	bx	lr

08002268 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800226c:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800226e:	2603      	movs	r6, #3
 8002270:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002274:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002276:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8002278:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800227c:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800227e:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002280:	f000 f8d4 	bl	800242c <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002284:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8002286:	4621      	mov	r1, r4
 8002288:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800228a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800228e:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002292:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8002294:	f000 fb38 	bl	8002908 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <platform_init+0x78>)
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022a4:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80022ac:	4c0d      	ldr	r4, [pc, #52]	; (80022e4 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80022b2:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80022b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80022b8:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80022ba:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80022be:	f000 fbc9 	bl	8002a54 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80022c2:	462a      	mov	r2, r5
 80022c4:	4620      	mov	r0, r4
 80022c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ca:	f000 fc87 	bl	8002bdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80022ce:	462a      	mov	r2, r5
 80022d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 fc81 	bl	8002bdc <HAL_GPIO_WritePin>
#endif
}
 80022da:	b016      	add	sp, #88	; 0x58
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000800 	.word	0x48000800

080022e8 <init_uart>:

void init_uart(void)
{
 80022e8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80022ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 80022ee:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022f6:	2101      	movs	r1, #1
 80022f8:	2303      	movs	r3, #3
 80022fa:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 80022fe:	4c16      	ldr	r4, [pc, #88]	; (8002358 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8002300:	2307      	movs	r3, #7
 8002302:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8002304:	6963      	ldr	r3, [r4, #20]
 8002306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230a:	6163      	str	r3, [r4, #20]
 800230c:	6963      	ldr	r3, [r4, #20]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002314:	a903      	add	r1, sp, #12
 8002316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 800231a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800231c:	f000 fb9a 	bl	8002a54 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8002320:	480e      	ldr	r0, [pc, #56]	; (800235c <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8002322:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8002360 <init_uart+0x78>
 8002326:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800232a:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002330:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002334:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002336:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002338:	230c      	movs	r3, #12
 800233a:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 800233c:	69a3      	ldr	r3, [r4, #24]
 800233e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002342:	61a3      	str	r3, [r4, #24]
 8002344:	69a3      	ldr	r3, [r4, #24]
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 800234e:	f000 fd99 	bl	8002e84 <HAL_UART_Init>
}
 8002352:	b008      	add	sp, #32
 8002354:	bd10      	pop	{r4, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	20000284 	.word	0x20000284
 8002360:	40013800 	.word	0x40013800

08002364 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <trigger_setup+0x44>)
{
 8002366:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	695b      	ldr	r3, [r3, #20]
{
 8002372:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800237c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002380:	2301      	movs	r3, #1
 8002382:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002386:	2500      	movs	r5, #0
 8002388:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800238a:	a901      	add	r1, sp, #4
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002390:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002394:	f000 fb5e 	bl	8002a54 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8002398:	462a      	mov	r2, r5
 800239a:	4621      	mov	r1, r4
 800239c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a0:	f000 fc1c 	bl	8002bdc <HAL_GPIO_WritePin>
}
 80023a4:	b007      	add	sp, #28
 80023a6:	bd30      	pop	{r4, r5, pc}
 80023a8:	40021000 	.word	0x40021000

080023ac <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b6:	f000 bc11 	b.w	8002bdc <HAL_GPIO_WritePin>

080023ba <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c4:	f000 bc0a 	b.w	8002bdc <HAL_GPIO_WritePin>

080023c8 <getch>:
}

char getch(void)
{
 80023c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80023ca:	4d0a      	ldr	r5, [pc, #40]	; (80023f4 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80023ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80023d2:	2201      	movs	r2, #1
 80023d4:	f10d 0107 	add.w	r1, sp, #7
 80023d8:	4628      	mov	r0, r5
 80023da:	f000 fdd4 	bl	8002f86 <HAL_UART_Receive>
 80023de:	b918      	cbnz	r0, 80023e8 <getch+0x20>
  //putch(d);
  return d;
}
 80023e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023e4:	b003      	add	sp, #12
 80023e6:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 80023e8:	6a23      	ldr	r3, [r4, #32]
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6223      	str	r3, [r4, #32]
 80023f0:	e7ed      	b.n	80023ce <getch+0x6>
 80023f2:	bf00      	nop
 80023f4:	20000284 	.word	0x20000284
 80023f8:	40013800 	.word	0x40013800

080023fc <putch>:

void putch(char c)
{
 80023fc:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80023fe:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8002402:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8002406:	2201      	movs	r2, #1
 8002408:	f10d 0107 	add.w	r1, sp, #7
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <putch+0x1c>)
 800240e:	f000 fd64 	bl	8002eda <HAL_UART_Transmit>
}
 8002412:	b003      	add	sp, #12
 8002414:	f85d fb04 	ldr.w	pc, [sp], #4
 8002418:	20000284 	.word	0x20000284

0800241c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <HAL_GetTick+0xc>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	1c42      	adds	r2, r0, #1
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200002f4 	.word	0x200002f4

0800242c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242c:	6803      	ldr	r3, [r0, #0]
{
 800242e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	07d9      	lsls	r1, r3, #31
{
 8002434:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	d411      	bmi.n	800245c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	079a      	lsls	r2, r3, #30
 800243c:	f100 8086 	bmi.w	800254c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	071e      	lsls	r6, r3, #28
 8002444:	f100 80f4 	bmi.w	8002630 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	075d      	lsls	r5, r3, #29
 800244c:	f100 8140 	bmi.w	80026d0 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002450:	69e2      	ldr	r2, [r4, #28]
 8002452:	2a00      	cmp	r2, #0
 8002454:	f040 81cb 	bne.w	80027ee <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002458:	2000      	movs	r0, #0
 800245a:	e021      	b.n	80024a0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800245c:	499a      	ldr	r1, [pc, #616]	; (80026c8 <HAL_RCC_OscConfig+0x29c>)
 800245e:	684b      	ldr	r3, [r1, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b04      	cmp	r3, #4
 8002466:	d007      	beq.n	8002478 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002468:	684b      	ldr	r3, [r1, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_OscConfig+0x7a>
 8002472:	684b      	ldr	r3, [r1, #4]
 8002474:	03db      	lsls	r3, r3, #15
 8002476:	d516      	bpl.n	80024a6 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	6809      	ldr	r1, [r1, #0]
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2201      	movs	r2, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	420b      	tst	r3, r1
 8002496:	d0cf      	beq.n	8002438 <HAL_RCC_OscConfig+0xc>
 8002498:	6863      	ldr	r3, [r4, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1cc      	bne.n	8002438 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
}
 80024a0:	b002      	add	sp, #8
 80024a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	6862      	ldr	r2, [r4, #4]
 80024a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80024ac:	d124      	bne.n	80024f8 <HAL_RCC_OscConfig+0xcc>
 80024ae:	680b      	ldr	r3, [r1, #0]
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024b6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80024b8:	68a0      	ldr	r0, [r4, #8]
 80024ba:	f023 030f 	bic.w	r3, r3, #15
 80024be:	4303      	orrs	r3, r0
 80024c0:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c2:	b34a      	cbz	r2, 8002518 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 80024c4:	f7ff ffaa 	bl	800241c <HAL_GetTick>
 80024c8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80024cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	2701      	movs	r7, #1
 80024d0:	fa96 f3a6 	rbit	r3, r6
 80024d4:	680a      	ldr	r2, [r1, #0]
 80024d6:	fa96 f3a6 	rbit	r3, r6
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	fa07 f303 	lsl.w	r3, r7, r3
 80024e6:	4213      	tst	r3, r2
 80024e8:	d1a6      	bne.n	8002438 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ea:	f7ff ff97 	bl	800241c <HAL_GetTick>
 80024ee:	1b40      	subs	r0, r0, r5
 80024f0:	2864      	cmp	r0, #100	; 0x64
 80024f2:	d9ed      	bls.n	80024d0 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80024f4:	2003      	movs	r0, #3
 80024f6:	e7d3      	b.n	80024a0 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	680b      	ldr	r3, [r1, #0]
 80024fa:	b932      	cbnz	r2, 800250a <HAL_RCC_OscConfig+0xde>
 80024fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002500:	600b      	str	r3, [r1, #0]
 8002502:	680b      	ldr	r3, [r1, #0]
 8002504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002508:	e7d4      	b.n	80024b4 <HAL_RCC_OscConfig+0x88>
 800250a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800250e:	d1f5      	bne.n	80024fc <HAL_RCC_OscConfig+0xd0>
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	600b      	str	r3, [r1, #0]
 8002516:	e7ca      	b.n	80024ae <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002518:	f7ff ff80 	bl	800241c <HAL_GetTick>
 800251c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8002520:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	2701      	movs	r7, #1
 8002524:	fa96 f3a6 	rbit	r3, r6
 8002528:	680a      	ldr	r2, [r1, #0]
 800252a:	fa96 f3a6 	rbit	r3, r6
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa07 f303 	lsl.w	r3, r7, r3
 800253a:	4213      	tst	r3, r2
 800253c:	f43f af7c 	beq.w	8002438 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff ff6c 	bl	800241c <HAL_GetTick>
 8002544:	1b40      	subs	r0, r0, r5
 8002546:	2864      	cmp	r0, #100	; 0x64
 8002548:	d9ec      	bls.n	8002524 <HAL_RCC_OscConfig+0xf8>
 800254a:	e7d3      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800254c:	495e      	ldr	r1, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x29c>)
 800254e:	684b      	ldr	r3, [r1, #4]
 8002550:	f013 0f0c 	tst.w	r3, #12
 8002554:	d007      	beq.n	8002566 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002556:	684b      	ldr	r3, [r1, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d121      	bne.n	80025a4 <HAL_RCC_OscConfig+0x178>
 8002560:	684b      	ldr	r3, [r1, #4]
 8002562:	03df      	lsls	r7, r3, #15
 8002564:	d41e      	bmi.n	80025a4 <HAL_RCC_OscConfig+0x178>
 8002566:	2302      	movs	r3, #2
 8002568:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256c:	6808      	ldr	r0, [r1, #0]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2201      	movs	r2, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	4203      	tst	r3, r0
 8002582:	d002      	beq.n	800258a <HAL_RCC_OscConfig+0x15e>
 8002584:	6923      	ldr	r3, [r4, #16]
 8002586:	4293      	cmp	r3, r2
 8002588:	d189      	bne.n	800249e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	6808      	ldr	r0, [r1, #0]
 800258c:	23f8      	movs	r3, #248	; 0xf8
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	fab3 f283 	clz	r2, r3
 8002596:	6963      	ldr	r3, [r4, #20]
 8002598:	4093      	lsls	r3, r2
 800259a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
 80025a2:	e74d      	b.n	8002440 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a4:	6922      	ldr	r2, [r4, #16]
 80025a6:	2501      	movs	r5, #1
 80025a8:	b302      	cbz	r2, 80025ec <HAL_RCC_OscConfig+0x1c0>
 80025aa:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	2702      	movs	r7, #2
 80025be:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80025c0:	f7ff ff2c 	bl	800241c <HAL_GetTick>
 80025c4:	4606      	mov	r6, r0
 80025c6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	680a      	ldr	r2, [r1, #0]
 80025cc:	fa97 f3a7 	rbit	r3, r7
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa05 f303 	lsl.w	r3, r5, r3
 80025dc:	4213      	tst	r3, r2
 80025de:	d1d4      	bne.n	800258a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff ff1c 	bl	800241c <HAL_GetTick>
 80025e4:	1b80      	subs	r0, r0, r6
 80025e6:	2802      	cmp	r0, #2
 80025e8:	d9ed      	bls.n	80025c6 <HAL_RCC_OscConfig+0x19a>
 80025ea:	e783      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
 80025ec:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	2702      	movs	r7, #2
 8002600:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002602:	f7ff ff0b 	bl	800241c <HAL_GetTick>
 8002606:	4606      	mov	r6, r0
 8002608:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	fa97 f3a7 	rbit	r3, r7
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	fa05 f303 	lsl.w	r3, r5, r3
 800261e:	4213      	tst	r3, r2
 8002620:	f43f af0e 	beq.w	8002440 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff fefa 	bl	800241c <HAL_GetTick>
 8002628:	1b80      	subs	r0, r0, r6
 800262a:	2802      	cmp	r0, #2
 800262c:	d9ec      	bls.n	8002608 <HAL_RCC_OscConfig+0x1dc>
 800262e:	e761      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002630:	69a2      	ldr	r2, [r4, #24]
 8002632:	4d25      	ldr	r5, [pc, #148]	; (80026c8 <HAL_RCC_OscConfig+0x29c>)
 8002634:	4825      	ldr	r0, [pc, #148]	; (80026cc <HAL_RCC_OscConfig+0x2a0>)
 8002636:	2101      	movs	r1, #1
 8002638:	b312      	cbz	r2, 8002680 <HAL_RCC_OscConfig+0x254>
 800263a:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	4403      	add	r3, r0
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	2602      	movs	r6, #2
 8002648:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 800264a:	f7ff fee7 	bl	800241c <HAL_GetTick>
 800264e:	4607      	mov	r7, r0
 8002650:	fa96 f3a6 	rbit	r3, r6
 8002654:	fa96 f3a6 	rbit	r3, r6
 8002658:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800265e:	fa96 f3a6 	rbit	r3, r6
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	4213      	tst	r3, r2
 8002670:	f47f aeea 	bne.w	8002448 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002674:	f7ff fed2 	bl	800241c <HAL_GetTick>
 8002678:	1bc0      	subs	r0, r0, r7
 800267a:	2802      	cmp	r0, #2
 800267c:	d9e8      	bls.n	8002650 <HAL_RCC_OscConfig+0x224>
 800267e:	e739      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
 8002680:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	4403      	add	r3, r0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	2602      	movs	r6, #2
 800268e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002690:	f7ff fec4 	bl	800241c <HAL_GetTick>
 8002694:	4607      	mov	r7, r0
 8002696:	fa96 f3a6 	rbit	r3, r6
 800269a:	fa96 f3a6 	rbit	r3, r6
 800269e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80026a4:	fa96 f3a6 	rbit	r3, r6
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4213      	tst	r3, r2
 80026b6:	f43f aec7 	beq.w	8002448 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff feaf 	bl	800241c <HAL_GetTick>
 80026be:	1bc0      	subs	r0, r0, r7
 80026c0:	2802      	cmp	r0, #2
 80026c2:	d9e8      	bls.n	8002696 <HAL_RCC_OscConfig+0x26a>
 80026c4:	e716      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d0:	498a      	ldr	r1, [pc, #552]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	69cb      	ldr	r3, [r1, #28]
 80026d4:	00d8      	lsls	r0, r3, #3
 80026d6:	d433      	bmi.n	8002740 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	69cb      	ldr	r3, [r1, #28]
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	61cb      	str	r3, [r1, #28]
 80026e0:	69cb      	ldr	r3, [r1, #28]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026ea:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4e84      	ldr	r6, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x4d4>)
 80026ee:	6833      	ldr	r3, [r6, #0]
 80026f0:	05da      	lsls	r2, r3, #23
 80026f2:	d527      	bpl.n	8002744 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	68e3      	ldr	r3, [r4, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d134      	bne.n	8002764 <HAL_RCC_OscConfig+0x338>
 80026fa:	6a0b      	ldr	r3, [r1, #32]
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002702:	f7ff fe8b 	bl	800241c <HAL_GetTick>
 8002706:	2602      	movs	r6, #2
 8002708:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	f04f 0801 	mov.w	r8, #1
 800270e:	fa96 f3a6 	rbit	r3, r6
 8002712:	fa96 f3a6 	rbit	r3, r6
 8002716:	2b00      	cmp	r3, #0
 8002718:	d061      	beq.n	80027de <HAL_RCC_OscConfig+0x3b2>
 800271a:	6a0a      	ldr	r2, [r1, #32]
 800271c:	fa96 f3a6 	rbit	r3, r6
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa08 f303 	lsl.w	r3, r8, r3
 800272c:	4213      	tst	r3, r2
 800272e:	d04e      	beq.n	80027ce <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8002730:	2d00      	cmp	r5, #0
 8002732:	f43f ae8d 	beq.w	8002450 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	69cb      	ldr	r3, [r1, #28]
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	61cb      	str	r3, [r1, #28]
 800273e:	e687      	b.n	8002450 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002740:	2500      	movs	r5, #0
 8002742:	e7d3      	b.n	80026ec <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002744:	6833      	ldr	r3, [r6, #0]
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800274c:	f7ff fe66 	bl	800241c <HAL_GetTick>
 8002750:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	6833      	ldr	r3, [r6, #0]
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	d4cd      	bmi.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7ff fe60 	bl	800241c <HAL_GetTick>
 800275c:	1bc0      	subs	r0, r0, r7
 800275e:	2864      	cmp	r0, #100	; 0x64
 8002760:	d9f7      	bls.n	8002752 <HAL_RCC_OscConfig+0x326>
 8002762:	e6c7      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	bb2b      	cbnz	r3, 80027b2 <HAL_RCC_OscConfig+0x386>
 8002766:	6a0b      	ldr	r3, [r1, #32]
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	620b      	str	r3, [r1, #32]
 800276e:	6a0b      	ldr	r3, [r1, #32]
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002776:	f7ff fe51 	bl	800241c <HAL_GetTick>
 800277a:	2602      	movs	r6, #2
 800277c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	f04f 0801 	mov.w	r8, #1
 8002782:	fa96 f3a6 	rbit	r3, r6
 8002786:	fa96 f3a6 	rbit	r3, r6
 800278a:	b363      	cbz	r3, 80027e6 <HAL_RCC_OscConfig+0x3ba>
 800278c:	6a0a      	ldr	r2, [r1, #32]
 800278e:	fa96 f3a6 	rbit	r3, r6
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	fa08 f303 	lsl.w	r3, r8, r3
 800279e:	4213      	tst	r3, r2
 80027a0:	d0c6      	beq.n	8002730 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7ff fe3b 	bl	800241c <HAL_GetTick>
 80027a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80027aa:	1bc0      	subs	r0, r0, r7
 80027ac:	4298      	cmp	r0, r3
 80027ae:	d9e8      	bls.n	8002782 <HAL_RCC_OscConfig+0x356>
 80027b0:	e6a0      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	6a0b      	ldr	r3, [r1, #32]
 80027b6:	d103      	bne.n	80027c0 <HAL_RCC_OscConfig+0x394>
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	620b      	str	r3, [r1, #32]
 80027be:	e79c      	b.n	80026fa <HAL_RCC_OscConfig+0x2ce>
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	620b      	str	r3, [r1, #32]
 80027c6:	6a0b      	ldr	r3, [r1, #32]
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	e798      	b.n	8002700 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff fe25 	bl	800241c <HAL_GetTick>
 80027d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027d6:	1bc0      	subs	r0, r0, r7
 80027d8:	4298      	cmp	r0, r3
 80027da:	d998      	bls.n	800270e <HAL_RCC_OscConfig+0x2e2>
 80027dc:	e68a      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
 80027de:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80027e4:	e79a      	b.n	800271c <HAL_RCC_OscConfig+0x2f0>
 80027e6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80027ec:	e7cf      	b.n	800278e <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ee:	4943      	ldr	r1, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	684b      	ldr	r3, [r1, #4]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	f43f ae51 	beq.w	800249e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fc:	2a02      	cmp	r2, #2
 80027fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002802:	d154      	bne.n	80028ae <HAL_RCC_OscConfig+0x482>
 8002804:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002810:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800281a:	f7ff fdff 	bl	800241c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002904 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8002822:	4606      	mov	r6, r0
 8002824:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	2501      	movs	r5, #1
 800282a:	fa97 f3a7 	rbit	r3, r7
 800282e:	680a      	ldr	r2, [r1, #0]
 8002830:	fa97 f3a7 	rbit	r3, r7
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa05 f303 	lsl.w	r3, r5, r3
 8002840:	4213      	tst	r3, r2
 8002842:	d12e      	bne.n	80028a2 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8002848:	684a      	ldr	r2, [r1, #4]
 800284a:	4303      	orrs	r3, r0
 800284c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002858:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002868:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	4f26      	ldr	r7, [pc, #152]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 800286c:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800286e:	f7ff fdd5 	bl	800241c <HAL_GetTick>
 8002872:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002876:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	2601      	movs	r6, #1
 800287a:	fa95 f3a5 	rbit	r3, r5
 800287e:	680a      	ldr	r2, [r1, #0]
 8002880:	fa95 f3a5 	rbit	r3, r5
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa06 f303 	lsl.w	r3, r6, r3
 8002890:	4213      	tst	r3, r2
 8002892:	f47f ade1 	bne.w	8002458 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7ff fdc1 	bl	800241c <HAL_GetTick>
 800289a:	1b00      	subs	r0, r0, r4
 800289c:	42b8      	cmp	r0, r7
 800289e:	d9ec      	bls.n	800287a <HAL_RCC_OscConfig+0x44e>
 80028a0:	e628      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7ff fdbb 	bl	800241c <HAL_GetTick>
 80028a6:	1b80      	subs	r0, r0, r6
 80028a8:	4540      	cmp	r0, r8
 80028aa:	d9be      	bls.n	800282a <HAL_RCC_OscConfig+0x3fe>
 80028ac:	e622      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
 80028ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028c4:	f7ff fdaa 	bl	800241c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	4f0e      	ldr	r7, [pc, #56]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 80028ca:	4604      	mov	r4, r0
 80028cc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	2601      	movs	r6, #1
 80028d2:	fa95 f3a5 	rbit	r3, r5
 80028d6:	680a      	ldr	r2, [r1, #0]
 80028d8:	fa95 f3a5 	rbit	r3, r5
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	fa06 f303 	lsl.w	r3, r6, r3
 80028e8:	4213      	tst	r3, r2
 80028ea:	f43f adb5 	beq.w	8002458 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff fd95 	bl	800241c <HAL_GetTick>
 80028f2:	1b00      	subs	r0, r0, r4
 80028f4:	42b8      	cmp	r0, r7
 80028f6:	d9ec      	bls.n	80028d2 <HAL_RCC_OscConfig+0x4a6>
 80028f8:	e5fc      	b.n	80024f4 <HAL_RCC_OscConfig+0xc8>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
 8002904:	00030d40 	.word	0x00030d40

08002908 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_RCC_ClockConfig+0x144>)
{
 800290a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	428b      	cmp	r3, r1
{
 8002914:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002916:	d31b      	bcc.n	8002950 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	0790      	lsls	r0, r2, #30
 800291c:	d424      	bmi.n	8002968 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	07d2      	lsls	r2, r2, #31
 8002920:	d42a      	bmi.n	8002978 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002922:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_RCC_ClockConfig+0x144>)
 8002924:	6813      	ldr	r3, [r2, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	428b      	cmp	r3, r1
 800292c:	d87a      	bhi.n	8002a24 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292e:	6820      	ldr	r0, [r4, #0]
 8002930:	0743      	lsls	r3, r0, #29
 8002932:	f100 8082 	bmi.w	8002a3a <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	f010 0008 	ands.w	r0, r0, #8
 800293a:	d014      	beq.n	8002966 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293c:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <HAL_RCC_ClockConfig+0x148>)
 800293e:	6921      	ldr	r1, [r4, #16]
 8002940:	6853      	ldr	r3, [r2, #4]
 8002942:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002946:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800294a:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 800294c:	2000      	movs	r0, #0
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	f023 0307 	bic.w	r3, r3, #7
 8002956:	430b      	orrs	r3, r1
 8002958:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800295a:	6813      	ldr	r3, [r2, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	428b      	cmp	r3, r1
 8002962:	d0d9      	beq.n	8002918 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
}
 8002966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4839      	ldr	r0, [pc, #228]	; (8002a50 <HAL_RCC_ClockConfig+0x148>)
 800296a:	68a5      	ldr	r5, [r4, #8]
 800296c:	6843      	ldr	r3, [r0, #4]
 800296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002972:	432b      	orrs	r3, r5
 8002974:	6043      	str	r3, [r0, #4]
 8002976:	e7d2      	b.n	800291e <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002978:	6862      	ldr	r2, [r4, #4]
 800297a:	4d35      	ldr	r5, [pc, #212]	; (8002a50 <HAL_RCC_ClockConfig+0x148>)
 800297c:	2a01      	cmp	r2, #1
 800297e:	d127      	bne.n	80029d0 <HAL_RCC_ClockConfig+0xc8>
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002988:	6828      	ldr	r0, [r5, #0]
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	d0e2      	beq.n	8002964 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	686b      	ldr	r3, [r5, #4]
 80029a0:	f023 0303 	bic.w	r3, r3, #3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 80029a8:	f7ff fd38 	bl	800241c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	6863      	ldr	r3, [r4, #4]
 80029ae:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80029b0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	d11e      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	686b      	ldr	r3, [r5, #4]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d0af      	beq.n	8002922 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7ff fd2b 	bl	800241c <HAL_GetTick>
 80029c6:	1b80      	subs	r0, r0, r6
 80029c8:	42b8      	cmp	r0, r7
 80029ca:	d9f5      	bls.n	80029b8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
 80029ce:	e7ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d0:	2a02      	cmp	r2, #2
 80029d2:	bf0c      	ite	eq
 80029d4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80029d8:	2302      	movne	r3, #2
 80029da:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	682e      	ldr	r6, [r5, #0]
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f303 	lsl.w	r3, r0, r3
 80029f2:	4233      	tst	r3, r6
 80029f4:	e7d2      	b.n	800299c <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fa:	686b      	ldr	r3, [r5, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d08e      	beq.n	8002922 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7ff fd0a 	bl	800241c <HAL_GetTick>
 8002a08:	1b80      	subs	r0, r0, r6
 8002a0a:	42b8      	cmp	r0, r7
 8002a0c:	d9f5      	bls.n	80029fa <HAL_RCC_ClockConfig+0xf2>
 8002a0e:	e7dd      	b.n	80029cc <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7ff fd04 	bl	800241c <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	42b8      	cmp	r0, r7
 8002a18:	d8d8      	bhi.n	80029cc <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1a:	686b      	ldr	r3, [r5, #4]
 8002a1c:	f013 0f0c 	tst.w	r3, #12
 8002a20:	d1f6      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x108>
 8002a22:	e77e      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d195      	bne.n	8002964 <HAL_RCC_ClockConfig+0x5c>
 8002a38:	e779      	b.n	800292e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3a:	4905      	ldr	r1, [pc, #20]	; (8002a50 <HAL_RCC_ClockConfig+0x148>)
 8002a3c:	68e3      	ldr	r3, [r4, #12]
 8002a3e:	684a      	ldr	r2, [r1, #4]
 8002a40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a44:	431a      	orrs	r2, r3
 8002a46:	604a      	str	r2, [r1, #4]
 8002a48:	e775      	b.n	8002936 <HAL_RCC_ClockConfig+0x2e>
 8002a4a:	bf00      	nop
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a58:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002bd0 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5c:	4c5d      	ldr	r4, [pc, #372]	; (8002bd4 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8002a5e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a60:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002a64:	680a      	ldr	r2, [r1, #0]
 8002a66:	fa32 f503 	lsrs.w	r5, r2, r3
 8002a6a:	d102      	bne.n	8002a72 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8002a6c:	b003      	add	sp, #12
 8002a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a72:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 8002a76:	ea1a 0202 	ands.w	r2, sl, r2
 8002a7a:	f000 809e 	beq.w	8002bba <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7e:	684d      	ldr	r5, [r1, #4]
 8002a80:	f025 0e10 	bic.w	lr, r5, #16
 8002a84:	f1be 0f02 	cmp.w	lr, #2
 8002a88:	d114      	bne.n	8002ab4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8002a8a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002a8e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a92:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002a96:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002a9e:	270f      	movs	r7, #15
 8002aa0:	fa07 f70b 	lsl.w	r7, r7, fp
 8002aa4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa8:	690e      	ldr	r6, [r1, #16]
 8002aaa:	fa06 f60b 	lsl.w	r6, r6, fp
 8002aae:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8002ab0:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8002ab4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002abc:	2603      	movs	r6, #3
 8002abe:	fa06 f70c 	lsl.w	r7, r6, ip
 8002ac2:	ea2b 0b07 	bic.w	fp, fp, r7
 8002ac6:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac8:	f005 0703 	and.w	r7, r5, #3
 8002acc:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad4:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad8:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8002adc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ade:	d811      	bhi.n	8002b04 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8002ae0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae2:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae6:	68cf      	ldr	r7, [r1, #12]
 8002ae8:	fa07 f70c 	lsl.w	r7, r7, ip
 8002aec:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002af0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002af2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002af8:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002afc:	409f      	lsls	r7, r3
 8002afe:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002b02:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002b04:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b06:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	688e      	ldr	r6, [r1, #8]
 8002b0a:	fa06 f60c 	lsl.w	r6, r6, ip
 8002b0e:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002b10:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b12:	00ee      	lsls	r6, r5, #3
 8002b14:	d551      	bpl.n	8002bba <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8002b1a:	f046 0601 	orr.w	r6, r6, #1
 8002b1e:	f8c8 6018 	str.w	r6, [r8, #24]
 8002b22:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8002b26:	f023 0703 	bic.w	r7, r3, #3
 8002b2a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002b2e:	f006 0601 	and.w	r6, r6, #1
 8002b32:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002b36:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002b38:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002b3e:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002b40:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002b44:	f04f 0c0f 	mov.w	ip, #15
 8002b48:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002b50:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b54:	d033      	beq.n	8002bbe <HAL_GPIO_Init+0x16a>
 8002b56:	4e20      	ldr	r6, [pc, #128]	; (8002bd8 <HAL_GPIO_Init+0x184>)
 8002b58:	42b0      	cmp	r0, r6
 8002b5a:	d032      	beq.n	8002bc2 <HAL_GPIO_Init+0x16e>
 8002b5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b60:	42b0      	cmp	r0, r6
 8002b62:	d030      	beq.n	8002bc6 <HAL_GPIO_Init+0x172>
 8002b64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b68:	42b0      	cmp	r0, r6
 8002b6a:	d02e      	beq.n	8002bca <HAL_GPIO_Init+0x176>
 8002b6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b70:	42b0      	cmp	r0, r6
 8002b72:	bf0c      	ite	eq
 8002b74:	2604      	moveq	r6, #4
 8002b76:	2605      	movne	r6, #5
 8002b78:	fa06 f60e 	lsl.w	r6, r6, lr
 8002b7c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b80:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8002b82:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b86:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	bf0c      	ite	eq
 8002b8c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002b8e:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8002b90:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002b92:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b94:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002b98:	bf0c      	ite	eq
 8002b9a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002b9c:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8002b9e:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002ba0:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	bf0c      	ite	eq
 8002ba8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002baa:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8002bac:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002bae:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	bf54      	ite	pl
 8002bb4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002bb6:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8002bb8:	60e6      	str	r6, [r4, #12]
    position++;
 8002bba:	3301      	adds	r3, #1
 8002bbc:	e752      	b.n	8002a64 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	e7da      	b.n	8002b78 <HAL_GPIO_Init+0x124>
 8002bc2:	2601      	movs	r6, #1
 8002bc4:	e7d8      	b.n	8002b78 <HAL_GPIO_Init+0x124>
 8002bc6:	2602      	movs	r6, #2
 8002bc8:	e7d6      	b.n	8002b78 <HAL_GPIO_Init+0x124>
 8002bca:	2603      	movs	r6, #3
 8002bcc:	e7d4      	b.n	8002b78 <HAL_GPIO_Init+0x124>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40010400 	.word	0x40010400
 8002bd8:	48000400 	.word	0x48000400

08002bdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bdc:	b10a      	cbz	r2, 8002be2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bde:	6181      	str	r1, [r0, #24]
 8002be0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002be4:	4770      	bx	lr
 8002be6:	0000      	movs	r0, r0

08002be8 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002be8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bea:	6881      	ldr	r1, [r0, #8]
 8002bec:	69c3      	ldr	r3, [r0, #28]
{
 8002bee:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf0:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bf2:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf4:	4329      	orrs	r1, r5
 8002bf6:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bf8:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bfc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bfe:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c02:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c04:	4321      	orrs	r1, r4
 8002c06:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	6851      	ldr	r1, [r2, #4]
 8002c0a:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c0c:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002c12:	4321      	orrs	r1, r4
 8002c14:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c16:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c18:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c1a:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c1e:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c20:	4321      	orrs	r1, r4
 8002c22:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c24:	4962      	ldr	r1, [pc, #392]	; (8002db0 <UART_SetConfig+0x1c8>)
 8002c26:	428a      	cmp	r2, r1
 8002c28:	d116      	bne.n	8002c58 <UART_SetConfig+0x70>
 8002c2a:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8002c2e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002c30:	f001 0103 	and.w	r1, r1, #3
 8002c34:	3901      	subs	r1, #1
 8002c36:	2902      	cmp	r1, #2
 8002c38:	f200 80b2 	bhi.w	8002da0 <UART_SetConfig+0x1b8>
 8002c3c:	4c5d      	ldr	r4, [pc, #372]	; (8002db4 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	5c61      	ldrb	r1, [r4, r1]
 8002c44:	d177      	bne.n	8002d36 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 8002c46:	2908      	cmp	r1, #8
 8002c48:	d872      	bhi.n	8002d30 <UART_SetConfig+0x148>
 8002c4a:	e8df f001 	tbb	[pc, r1]
 8002c4e:	acac      	.short	0xacac
 8002c50:	71ac7124 	.word	0x71ac7124
 8002c54:	7171      	.short	0x7171
 8002c56:	a4          	.byte	0xa4
 8002c57:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c58:	4957      	ldr	r1, [pc, #348]	; (8002db8 <UART_SetConfig+0x1d0>)
 8002c5a:	428a      	cmp	r2, r1
 8002c5c:	d12c      	bne.n	8002cb8 <UART_SetConfig+0xd0>
 8002c5e:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8002c62:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002c64:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8002c68:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002c6c:	f000 8090 	beq.w	8002d90 <UART_SetConfig+0x1a8>
 8002c70:	d80b      	bhi.n	8002c8a <UART_SetConfig+0xa2>
 8002c72:	2900      	cmp	r1, #0
 8002c74:	f000 8094 	beq.w	8002da0 <UART_SetConfig+0x1b8>
 8002c78:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002c7c:	f000 8090 	beq.w	8002da0 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	d054      	beq.n	8002d30 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8002c88:	e015      	b.n	8002cb6 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8a:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002c8e:	d1f7      	bne.n	8002c80 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c94:	d166      	bne.n	8002d64 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c96:	6841      	ldr	r1, [r0, #4]
 8002c98:	084b      	lsrs	r3, r1, #1
 8002c9a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ca2:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca6:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ca8:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002caa:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cae:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]

}
 8002cb6:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb8:	4940      	ldr	r1, [pc, #256]	; (8002dbc <UART_SetConfig+0x1d4>)
 8002cba:	428a      	cmp	r2, r1
 8002cbc:	d110      	bne.n	8002ce0 <UART_SetConfig+0xf8>
 8002cbe:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8002cc2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002cc4:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8002cc8:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8002ccc:	d060      	beq.n	8002d90 <UART_SetConfig+0x1a8>
 8002cce:	d804      	bhi.n	8002cda <UART_SetConfig+0xf2>
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	d065      	beq.n	8002da0 <UART_SetConfig+0x1b8>
 8002cd4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002cd8:	e7d0      	b.n	8002c7c <UART_SetConfig+0x94>
 8002cda:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002cde:	e7d6      	b.n	8002c8e <UART_SetConfig+0xa6>
 8002ce0:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <UART_SetConfig+0x1d8>)
 8002ce2:	428a      	cmp	r2, r1
 8002ce4:	d110      	bne.n	8002d08 <UART_SetConfig+0x120>
 8002ce6:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8002cea:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002cec:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8002cf0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002cf4:	d04c      	beq.n	8002d90 <UART_SetConfig+0x1a8>
 8002cf6:	d804      	bhi.n	8002d02 <UART_SetConfig+0x11a>
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	d051      	beq.n	8002da0 <UART_SetConfig+0x1b8>
 8002cfc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002d00:	e7bc      	b.n	8002c7c <UART_SetConfig+0x94>
 8002d02:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8002d06:	e7c2      	b.n	8002c8e <UART_SetConfig+0xa6>
 8002d08:	492e      	ldr	r1, [pc, #184]	; (8002dc4 <UART_SetConfig+0x1dc>)
 8002d0a:	428a      	cmp	r2, r1
 8002d0c:	d1b8      	bne.n	8002c80 <UART_SetConfig+0x98>
 8002d0e:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8002d12:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002d14:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8002d18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002d1c:	d038      	beq.n	8002d90 <UART_SetConfig+0x1a8>
 8002d1e:	d804      	bhi.n	8002d2a <UART_SetConfig+0x142>
 8002d20:	2900      	cmp	r1, #0
 8002d22:	d03d      	beq.n	8002da0 <UART_SetConfig+0x1b8>
 8002d24:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002d28:	e7a8      	b.n	8002c7c <UART_SetConfig+0x94>
 8002d2a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002d2e:	e7ae      	b.n	8002c8e <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8002d30:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e7b9      	b.n	8002caa <UART_SetConfig+0xc2>
    switch (clocksource)
 8002d36:	2908      	cmp	r1, #8
 8002d38:	d8a5      	bhi.n	8002c86 <UART_SetConfig+0x9e>
 8002d3a:	a301      	add	r3, pc, #4	; (adr r3, 8002d40 <UART_SetConfig+0x158>)
 8002d3c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002d40:	08002d7d 	.word	0x08002d7d
 8002d44:	08002d7d 	.word	0x08002d7d
 8002d48:	08002d65 	.word	0x08002d65
 8002d4c:	08002c87 	.word	0x08002c87
 8002d50:	08002d7d 	.word	0x08002d7d
 8002d54:	08002c87 	.word	0x08002c87
 8002d58:	08002c87 	.word	0x08002c87
 8002d5c:	08002c87 	.word	0x08002c87
 8002d60:	08002d87 	.word	0x08002d87
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d64:	6841      	ldr	r1, [r0, #4]
 8002d66:	084b      	lsrs	r3, r1, #1
 8002d68:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d78:	2000      	movs	r0, #0
        break;
 8002d7a:	e79c      	b.n	8002cb6 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d7c:	6841      	ldr	r1, [r0, #4]
 8002d7e:	084b      	lsrs	r3, r1, #1
 8002d80:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8002d84:	e7f4      	b.n	8002d70 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d86:	6841      	ldr	r1, [r0, #4]
 8002d88:	084b      	lsrs	r3, r1, #1
 8002d8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d8e:	e7ef      	b.n	8002d70 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d94:	d1f7      	bne.n	8002d86 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d96:	6841      	ldr	r1, [r0, #4]
 8002d98:	084b      	lsrs	r3, r1, #1
 8002d9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002d9e:	e780      	b.n	8002ca2 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da4:	d1ea      	bne.n	8002d7c <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002da6:	6841      	ldr	r1, [r0, #4]
 8002da8:	084b      	lsrs	r3, r1, #1
 8002daa:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8002dae:	e778      	b.n	8002ca2 <UART_SetConfig+0xba>
 8002db0:	40013800 	.word	0x40013800
 8002db4:	08003104 	.word	0x08003104
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	40004c00 	.word	0x40004c00
 8002dc4:	40005000 	.word	0x40005000

08002dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	9f06      	ldr	r7, [sp, #24]
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4615      	mov	r5, r2
 8002dd0:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd2:	6822      	ldr	r2, [r4, #0]
 8002dd4:	69d3      	ldr	r3, [r2, #28]
 8002dd6:	ea31 0303 	bics.w	r3, r1, r3
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	42ab      	cmp	r3, r5
 8002de2:	d001      	beq.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002de4:	2000      	movs	r0, #0
 8002de6:	e014      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8002de8:	1c7b      	adds	r3, r7, #1
 8002dea:	d0f3      	beq.n	8002dd4 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002dec:	b997      	cbnz	r7, 8002e14 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002df6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002e00:	2320      	movs	r3, #32
 8002e02:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002e06:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002e10:	2003      	movs	r0, #3
}
 8002e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e14:	f7ff fb02 	bl	800241c <HAL_GetTick>
 8002e18:	1b80      	subs	r0, r0, r6
 8002e1a:	42b8      	cmp	r0, r7
 8002e1c:	d9d9      	bls.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xa>
 8002e1e:	e7e6      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x26>

08002e20 <UART_CheckIdleState>:
{
 8002e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e22:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	2100      	movs	r1, #0
 8002e26:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002e28:	f7ff faf8 	bl	800241c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002e32:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e34:	d417      	bmi.n	8002e66 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	075b      	lsls	r3, r3, #29
 8002e3c:	d50a      	bpl.n	8002e54 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	462b      	mov	r3, r5
 8002e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ffbb 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002e52:	b9a0      	cbnz	r0, 8002e7e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002e54:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002e56:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002e58:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002e5c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002e60:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002e64:	e00c      	b.n	8002e80 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff ffa7 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d0db      	beq.n	8002e36 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002e7e:	2003      	movs	r0, #3
}
 8002e80:	b003      	add	sp, #12
 8002e82:	bd30      	pop	{r4, r5, pc}

08002e84 <HAL_UART_Init>:
{
 8002e84:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002e86:	4604      	mov	r4, r0
 8002e88:	b328      	cbz	r0, 8002ed6 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002e8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e92:	b90b      	cbnz	r3, 8002e98 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002e94:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8002e98:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e9a:	2324      	movs	r3, #36	; 0x24
 8002e9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff fe9d 	bl	8002be8 <UART_SetConfig>
 8002eae:	2801      	cmp	r0, #1
 8002eb0:	d011      	beq.n	8002ed6 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8002eca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8002ed2:	f7ff bfa5 	b.w	8002e20 <UART_CheckIdleState>
}
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	bd10      	pop	{r4, pc}

08002eda <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002edc:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002ede:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002ee2:	2b20      	cmp	r3, #32
{
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002eea:	d14a      	bne.n	8002f82 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	d046      	beq.n	8002f7e <HAL_UART_Transmit+0xa4>
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	d044      	beq.n	8002f7e <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d042      	beq.n	8002f82 <HAL_UART_Transmit+0xa8>
 8002efc:	2301      	movs	r3, #1
 8002efe:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f06:	2321      	movs	r3, #33	; 0x21
 8002f08:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f0c:	f7ff fa86 	bl	800241c <HAL_GetTick>

    huart->TxXferSize = Size;
 8002f10:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002f14:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8002f16:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002f1a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	b962      	cbnz	r2, 8002f3c <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	9600      	str	r6, [sp, #0]
 8002f24:	463b      	mov	r3, r7
 8002f26:	2140      	movs	r1, #64	; 0x40
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ff4d 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002f2e:	b998      	cbnz	r0, 8002f58 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f30:	2320      	movs	r3, #32
 8002f32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f36:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8002f3a:	e00e      	b.n	8002f5a <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8002f3c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f40:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8002f42:	3a01      	subs	r2, #1
 8002f44:	b292      	uxth	r2, r2
 8002f46:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7ff ff39 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002f56:	b110      	cbz	r0, 8002f5e <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002f5a:	b003      	add	sp, #12
 8002f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5e:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f60:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f66:	d107      	bne.n	8002f78 <HAL_UART_Transmit+0x9e>
 8002f68:	6923      	ldr	r3, [r4, #16]
 8002f6a:	b92b      	cbnz	r3, 8002f78 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f6c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002f74:	8513      	strh	r3, [r2, #40]	; 0x28
 8002f76:	e7d0      	b.n	8002f1a <HAL_UART_Transmit+0x40>
 8002f78:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f7c:	e7fa      	b.n	8002f74 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8002f7e:	2001      	movs	r0, #1
 8002f80:	e7eb      	b.n	8002f5a <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002f82:	2002      	movs	r0, #2
 8002f84:	e7e9      	b.n	8002f5a <HAL_UART_Transmit+0x80>

08002f86 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f8a:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f8c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002f90:	2b20      	cmp	r3, #32
{
 8002f92:	460d      	mov	r5, r1
 8002f94:	4604      	mov	r4, r0
 8002f96:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f98:	d15c      	bne.n	8003054 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8002f9a:	2d00      	cmp	r5, #0
 8002f9c:	d058      	beq.n	8003050 <HAL_UART_Receive+0xca>
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d056      	beq.n	8003050 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d054      	beq.n	8003054 <HAL_UART_Receive+0xce>
 8002faa:	2301      	movs	r3, #1
 8002fac:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fbc:	2322      	movs	r3, #34	; 0x22
 8002fbe:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fc2:	f7ff fa2b 	bl	800241c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fc6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002fc8:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002fd0:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002fd2:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002fd6:	d115      	bne.n	8003004 <HAL_UART_Receive+0x7e>
 8002fd8:	6923      	ldr	r3, [r4, #16]
 8002fda:	b98b      	cbnz	r3, 8003000 <HAL_UART_Receive+0x7a>
 8002fdc:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002fe0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002fe4:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002fe8:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002fec:	b280      	uxth	r0, r0
 8002fee:	b980      	cbnz	r0, 8003012 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ff6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002ffa:	b002      	add	sp, #8
 8002ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003000:	23ff      	movs	r3, #255	; 0xff
 8003002:	e7ed      	b.n	8002fe0 <HAL_UART_Receive+0x5a>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ed      	bne.n	8002fe4 <HAL_UART_Receive+0x5e>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f8      	beq.n	8003000 <HAL_UART_Receive+0x7a>
 800300e:	237f      	movs	r3, #127	; 0x7f
 8003010:	e7e6      	b.n	8002fe0 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8003012:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8003018:	3a01      	subs	r2, #1
 800301a:	b292      	uxth	r2, r2
 800301c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003020:	4643      	mov	r3, r8
 8003022:	2200      	movs	r2, #0
 8003024:	2120      	movs	r1, #32
 8003026:	4620      	mov	r0, r4
 8003028:	f7ff fece 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 800302c:	b9a0      	cbnz	r0, 8003058 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302e:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003030:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003032:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003036:	d106      	bne.n	8003046 <HAL_UART_Receive+0xc0>
 8003038:	6922      	ldr	r2, [r4, #16]
 800303a:	b922      	cbnz	r2, 8003046 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800303c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800303e:	403b      	ands	r3, r7
 8003040:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003044:	e7d0      	b.n	8002fe8 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003046:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003048:	403b      	ands	r3, r7
 800304a:	f805 3b01 	strb.w	r3, [r5], #1
 800304e:	e7cb      	b.n	8002fe8 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8003050:	2001      	movs	r0, #1
 8003052:	e7d2      	b.n	8002ffa <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8003054:	2002      	movs	r0, #2
 8003056:	e7d0      	b.n	8002ffa <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8003058:	2003      	movs	r0, #3
 800305a:	e7ce      	b.n	8002ffa <HAL_UART_Receive+0x74>

0800305c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <_sbrk+0x2c>)
 800305e:	6811      	ldr	r1, [r2, #0]
{
 8003060:	b508      	push	{r3, lr}
 8003062:	4603      	mov	r3, r0
	if (heap_end == 0)
 8003064:	b909      	cbnz	r1, 800306a <_sbrk+0xe>
		heap_end = &end;
 8003066:	4909      	ldr	r1, [pc, #36]	; (800308c <_sbrk+0x30>)
 8003068:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800306a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800306c:	4669      	mov	r1, sp
 800306e:	4403      	add	r3, r0
 8003070:	428b      	cmp	r3, r1
 8003072:	d906      	bls.n	8003082 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8003074:	f7fd f8d0 	bl	8000218 <__errno>
 8003078:	230c      	movs	r3, #12
 800307a:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 800307c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 8003080:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003082:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 8003084:	e7fc      	b.n	8003080 <_sbrk+0x24>
 8003086:	bf00      	nop
 8003088:	200002fc 	.word	0x200002fc
 800308c:	20000310 	.word	0x20000310

08003090 <Reset_Handler>:
 8003090:	2100      	movs	r1, #0
 8003092:	e003      	b.n	800309c <LoopCopyDataInit>

08003094 <CopyDataInit>:
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <LoopForever+0x2>)
 8003096:	585b      	ldr	r3, [r3, r1]
 8003098:	5043      	str	r3, [r0, r1]
 800309a:	3104      	adds	r1, #4

0800309c <LoopCopyDataInit>:
 800309c:	480a      	ldr	r0, [pc, #40]	; (80030c8 <LoopForever+0x6>)
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <LoopForever+0xa>)
 80030a0:	1842      	adds	r2, r0, r1
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3f6      	bcc.n	8003094 <CopyDataInit>
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <LoopForever+0xe>)
 80030a8:	e002      	b.n	80030b0 <LoopFillZerobss>

080030aa <FillZerobss>:
 80030aa:	2300      	movs	r3, #0
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	3204      	adds	r2, #4

080030b0 <LoopFillZerobss>:
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <LoopForever+0x12>)
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3f9      	bcc.n	80030aa <FillZerobss>
 80030b6:	f3af 8000 	nop.w
 80030ba:	f7fd f8b3 	bl	8000224 <__libc_init_array>
 80030be:	f7fe ff91 	bl	8001fe4 <main>

080030c2 <LoopForever>:
 80030c2:	e7fe      	b.n	80030c2 <LoopForever>
 80030c4:	0800323c 	.word	0x0800323c
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000064 	.word	0x20000064
 80030d0:	20000064 	.word	0x20000064
 80030d4:	2000030c 	.word	0x2000030c

080030d8 <BusFault_Handler>:
 80030d8:	e7fe      	b.n	80030d8 <BusFault_Handler>
 80030da:	0000      	movs	r0, r0

080030dc <_init>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr

080030e8 <_fini>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr
